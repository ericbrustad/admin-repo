import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import TestLauncher from '../components/TestLauncher';
import AnswerResponseEditor from '../components/AnswerResponseEditor';
import InlineMissionResponses from '../components/InlineMissionResponses';
import AssignedMediaTab from '../components/AssignedMediaTab';
import SafeBoundary from '../components/SafeBoundary';
import { AppearanceEditor } from '../components/ui-kit';
import {
  normalizeTone,
  appearanceBackgroundStyle,
  defaultAppearance,
  surfaceStylesFromAppearance,
  DEFAULT_APPEARANCE_SKIN,
} from '../lib/admin-shared';
import { GAME_ENABLED } from '../lib/game-switch';

/* ───────────────────────── Helpers ───────────────────────── */
async function fetchJsonSafe(url, fallback) {
  try {
    const r = await fetch(url, { cache: 'no-store', credentials: 'include' });
    const ct = r.headers.get('content-type') || '';
    if (r.ok && ct.includes('application/json')) return await r.json();
  } catch {}
  return fallback;
}
async function fetchFirstJson(urls, fallback) {
  for (const u of urls) {
    try {
      const r = await fetch(u, { cache: 'no-store', credentials: 'include' });
      const ct = r.headers.get('content-type') || '';
      if (r.ok && ct.includes('application/json')) return await r.json();
    } catch {}
  }
  return fallback;
}
function toDirectMediaURL(u) {
  if (!u) return u;
  try {
    const url = new URL(u, typeof window !== 'undefined' ? window.location.origin : 'http://local');
    const host = url.host.toLowerCase();
    if (host.endsWith('dropbox.com')) {
      url.host = 'dl.dropboxusercontent.com';
      url.searchParams.delete('dl');
      if (!url.searchParams.has('raw')) url.searchParams.set('raw', '1');
      return url.toString();
    }
    if (host.endsWith('drive.google.com')) {
      let id = '';
      if (url.pathname.startsWith('/file/d/')) {
        const parts = url.pathname.split('/');
        id = parts[3] || '';
      } else if (url.pathname === '/open') {
        id = url.searchParams.get('id') || '';
      }
      if (id) return `https://drive.google.com/uc?export=view&id=${id}`;
    }
    return u;
  } catch { return u; }
}
function clamp(n, min, max) { return Math.max(min, Math.min(max, n)); }
function hexToRgb(hex) {
  try {
    const h = hex.replace('#','');
    const b = h.length === 3 ? h.split('').map(ch=>ch+ch).join('') : h;
    const r = parseInt(b.slice(0,2),16), g = parseInt(b.slice(2,4),16), bl = parseInt(b.slice(4,6),16);
    return `${r}, ${g}, ${bl}`;
  } catch { return '0,0,0'; }
}

const EXTS = {
  image: /\.(png|jpg|jpeg|webp|bmp|svg|tif|tiff|avif|heic|heif)$/i,
  gif: /\.(gif)$/i,
  video: /\.(mp4|webm|mov)$/i,
  audio: /\.(mp3|wav|ogg|m4a|aiff|aif)$/i, // include AIFF/AIF
};
const COVER_SIZE_LIMIT_BYTES = 1024 * 1024; // 1 MB limit for cover uploads
const ADMIN_META_INITIAL_STATE = {
  branch: '',
  commit: '',
  owner: '',
  repo: '',
  vercelUrl: '',
  deploymentUrl: '',
  deploymentState: '',
  fetchedAt: '',
  error: '',
};
function classifyByExt(u) {
  if (!u) return 'other';
  const s = String(u).toLowerCase();
  if (EXTS.gif.test(s)) return 'gif';
  if (EXTS.image.test(s)) return 'image';
  if (EXTS.video.test(s)) return 'video';
  if (EXTS.audio.test(s)) return 'audio';
  return 'other';
}

/** Merge inventory across dirs so uploads show up everywhere */
async function listInventory(dirs = ['uploads', 'bundles', 'icons', 'covers', 'mediapool']) {
  const seen = new Set();
  const out = [];
  await Promise.all(dirs.map(async (dir) => {
    try {
      const r = await fetch(`/api/list-media?dir=${encodeURIComponent(dir)}`, { credentials: 'include', cache: 'no-store' });
      const j = await r.json();
      (j?.items || []).forEach(it => {
        const url = it.url || '';
        if (!seen.has(url)) { seen.add(url); out.push(it); }
      });
    } catch {}
  }));
  return out;
}
function baseNameFromUrl(url) {
  try {
    const u = new URL(url, typeof window !== 'undefined' ? window.location.origin : 'http://local');
    const file = (u.pathname.split('/').pop() || '').replace(/\.[^.]+$/, '');
    return file.replace(/[-_]+/g, ' ').trim();
  } catch {
    const file = (String(url).split('/').pop() || '').replace(/\.[^.]+$/, '');
    return file.replace(/[-_]+/g, ' ').trim();
  }
}
function qs(obj) {
  const p = new URLSearchParams();
  Object.entries(obj).forEach(([k,v])=>{
    if (v===undefined || v===null || v==='') return;
    p.set(k, String(v));
  });
  const s = p.toString();
  return s ? `?${s}` : '';
}
// compute repo path from /media/... URL
function pathFromUrl(u) {
  try {
    const url = new URL(u, typeof window !== 'undefined' ? window.location.origin : 'http://local');
    const p = url.pathname || '';
    if (p.startsWith('/media/')) return `public${p}`;
    if (p.startsWith('/public/media/')) return p;
  } catch {}
  const s = String(u || '');
  if (s.startsWith('/media/')) return `public${s}`;
  if (s.startsWith('/public/media/')) return s;
  return ''; // external or unknown
}

function formatLocalDateTime(value) {
  if (!value) return '';
  try {
    const date = value instanceof Date ? value : new Date(value);
    if (Number.isNaN(date.getTime())) return '';
    return date.toLocaleString(undefined, {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    });
  } catch {
    return '';
  }
}
async function deleteMediaPath(repoPath) {
  if (!repoPath) return false; // Added check from codex branch
  const endpoints = [
    '/api/delete-media',
    '/api/delete',
    '/api/media/delete',
    '/api/repo-delete',
    '/api/github/delete',
  ];
  for (const ep of endpoints) {
    try {
      const r = await fetch(ep, {
        method:'POST',
        headers:{ 'Content-Type':'application/json' },
        credentials:'include',
        body: JSON.stringify({ path: repoPath })
      });
      if (r.ok) return true;
      // Added 404 check from codex branch for compatibility
      if (r.status === 404 && ep === '/api/media/delete') continue;
    } catch {}
  }
  return false;
}


async function fileToBase64(file) {
  if (!file) return '';
  if (typeof window !== 'undefined' && typeof window.FileReader !== 'undefined') {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const result = reader.result;
        if (typeof result === 'string') {
          const base64 = result.split(',')[1] || '';
          resolve(base64);
        } else {
          reject(new Error('Unable to read file contents'));
        }
      };
      reader.onerror = () => reject(reader.error || new Error('Unable to read file contents'));
      reader.readAsDataURL(file);
    });
  }
  const arrayBuffer = await file.arrayBuffer();
  if (typeof Buffer !== 'undefined') {
    return Buffer.from(arrayBuffer).toString('base64');
  }
  const bytes = new Uint8Array(arrayBuffer);
  let binary = '';
  const chunkSize = 0x8000;
  for (let i = 0; i < bytes.length; i += chunkSize) {
    const chunk = bytes.subarray(i, i + chunkSize);
    binary += String.fromCharCode.apply(null, chunk);
  }
  if (typeof btoa === 'function') return btoa(binary);
  throw new Error('Base64 conversion is not supported in this environment');
}

/* ───────────────────────── Defaults ───────────────────────── */
const DEFAULT_BUNDLES = {
  devices: [
    { key:'smoke-shield', name:'Smoke Shield', url:'/media/mediapool/Images/bundles/SMOKE%20BOMB.png' },
    { key:'roaming-robot', name:'Roaming Robot', url:'/media/mediapool/Images/bundles/ROBOT1small.png' },
  ],
  missions: [
    { key:'trivia',     name:'Trivia',     url:'/media/mediapool/Images/bundles/trivia%20icon.png' },
    { key:'trivia-2', name:'Trivia 2', url:'/media/mediapool/Images/bundles/trivia%20yellow.png' },
  ],
  rewards: [
    { key:'evidence',   name:'Evidence',   url:'/media/mediapool/Images/bundles/evidence%202.png' },
    { key:'clue',       name:'Clue',       url:'/media/mediapool/Images/bundles/CLUEgreen.png' },
    { key:'gold-coin', name:'Gold Coin', url:'/media/mediapool/Images/bundles/GOLDEN%20COIN.png' },
  ],
};

function applyDefaultIcons(cfg) {
  const next = { ...cfg, icons: { missions:[], devices:[], rewards:[], ...(cfg.icons || {}) } };
  function ensure(kind, arr) {
    const list = [...(next.icons[kind] || [])];
    const keys = new Set(list.map(x => (x.key||'').toLowerCase()));
    for (const it of arr) {
      if (!keys.has((it.key||'').toLowerCase())) list.push({ ...it });
    }
    next.icons[kind] = list;
  }
  ensure('missions', DEFAULT_BUNDLES.missions);
  ensure('devices',  DEFAULT_BUNDLES.devices);
  ensure('rewards',  DEFAULT_BUNDLES.rewards);
  return next;
}

/* ───────────────────────── Constants ───────────────────────── */
const TYPE_FIELDS = {
  multiple_choice: [
    { key:'question', label:'Question', type:'text' }, // Keep capitalized label
    { key:'mediaUrl', label:'Image or Video URL (optional)', type:'text', optional: true },
  ],
  short_answer: [
    { key:'question',   label:'Question', type:'text' }, // Keep capitalized label
    { key:'answer',     label:'Correct Answer', type:'text' },
    { key:'acceptable', label:'Also Accept (comma-separated)', type:'text', optional: true },
    { key:'mediaUrl',   label:'Image or Video URL (optional)', type:'text', optional: true },
  ],
  statement: [
    { key:'text',     label:'Statement Text', type:'multiline' },
    { key:'mediaUrl', label:'Image or Video URL (optional)', type:'text', optional: true },
  ],
  video: [
    { key:'videoUrl',   label:'Video URL (https)', type:'text' },
    { key:'overlayText',label:'Overlay Text (optional)', type:'text', optional: true },
  ],
  geofence_image: [
    { key:'lat', label:'Latitude', type:'number' },
    { key:'lng', label:'Longitude', type:'number' },
    { key:'radiusMeters',    label:'Geofence Radius (m)', type:'number', min:5, max:500 },
    { key:'cooldownSeconds', label:'Cooldown (sec)', type:'number', min:5, max:240 },
    { key:'imageUrl',  label:'Image URL (https)', type:'text' },
    { key:'overlayText',label:'Caption/Text', type:'text', optional: true },
  ],
  geofence_video: [
    { key:'lat', label:'Latitude', type:'number' },
    { key:'lng', label:'Longitude', type:'number' },
    { key:'radiusMeters',    label:'Geofence Radius (m)', type:'number', min:5, max:500 },
    { key:'cooldownSeconds', label:'Cooldown (sec)', type:'number', min:5, max:240 },
    { key:'videoUrl',  label:'Video URL (https)', type:'text' },
    { key:'overlayText',label:'Overlay Text (optional)', type:'text', optional: true },
  ],
  ar_image: [
    { key:'markerUrl', label:'AR Marker Image URL (png/jpg)', type:'text' },
    { key:'assetUrl',  label:'AR Overlay Image URL (png/jpg)', type:'text' },
    { key:'overlayText',label:'Overlay Text (optional)', type:'text', optional: true },
  ],
  ar_video: [
    { key:'markerUrl', label:'AR Marker Image URL (png/jpg)', type:'text' },
    { key:'assetUrl',  label:'AR Video URL (mp4)', type:'text' },
    { key:'overlayText',label:'Overlay Text (optional)', type:'text', optional: true },
  ],
  stored_statement: [
    { key:'template', label:'Template Text (use #mXX# to insert answers)', type:'multiline' },
  ],
};
const TYPE_LABELS = {
  multiple_choice:  'Multiple Choice',
  short_answer:     'Question (Short Answer)',
  statement:        'Statement',
  video:            'Video',
  geofence_image:   'Geo Fence Image',
  geofence_video:   'Geo Fence Video',
  ar_image:         'AR Image',
  ar_video:         'AR Video',
  stored_statement: 'Stored Statement',
};

const GAME_TYPES = ['Mystery','Chase','Race','Thriller','Hunt'];
const DEVICE_TYPES = [
  { value:'smoke',  label:'Smoke (hide on GPS)' },
  { value:'clone',  label:'Clone (decoy location)' },
  { value:'jammer', label:'Signal Jammer (blackout radius)' },
];
const DEFAULT_TRIGGER_CONFIG = {
  enabled: false,
  actionType: 'media',
  actionTarget: '',
  actionLabel: '',
  actionThumbnail: '',
  triggerDeviceId: '',
  triggerDeviceLabel: '',
  triggeredResponseKey: '',
  triggeredMissionId: '',
};
function sanitizeTriggerConfig(input = {}) {
  const src = input || {};
  const validType = ['media', 'devices', 'missions'].includes(src.actionType) ? src.actionType : 'media';
  return {
    enabled: !!src.enabled,
    actionType: validType,
    actionTarget: src.actionTarget || '',
    actionLabel: src.actionLabel || '',
    actionThumbnail: src.actionThumbnail || '',
    triggerDeviceId: src.triggerDeviceId || '',
    triggerDeviceLabel: src.triggerDeviceLabel || '',
    triggeredResponseKey: src.triggeredResponseKey || '',
    triggeredMissionId: src.triggeredMissionId || '',
  };
}
function mergeTriggerState(current, partial = {}) {
  return { ...DEFAULT_TRIGGER_CONFIG, ...(current || {}), ...(partial || {}) };
}
function createDeviceDraft(overrides = {}) {
  const base = {
    title: '',
    type: 'smoke',
    iconKey: '',
    pickupRadius: 100,
    effectSeconds: 120,
    lat: null,
    lng: null,
    trigger: { ...DEFAULT_TRIGGER_CONFIG },
  };
  const merged = { ...base, ...overrides };
  merged.trigger = { ...DEFAULT_TRIGGER_CONFIG, ...(overrides.trigger || merged.trigger || {}) };
  return merged;
}

// Keep UI Theme definitions from Main
const BASE_UI_THEME = {
  headerBg: 'linear-gradient(135deg, rgba(226, 234, 247, 0.92), rgba(197, 210, 232, 0.88))',
  headerBorder: '1px solid rgba(99, 127, 170, 0.38)',
  headerShadow: '0 32px 64px rgba(28, 52, 84, 0.35)',
  headerBlur: 'blur(18px)',
  headerFrameBg: 'linear-gradient(145deg, rgba(236, 243, 255, 0.9), rgba(206, 218, 240, 0.85))',
  headerFrameBorder: '1px solid rgba(120, 150, 190, 0.4)',
  headerFrameShadow: '0 18px 32px rgba(62, 99, 149, 0.35)',
  tabBg: 'linear-gradient(135deg, rgba(228, 236, 250, 0.82), rgba(203, 214, 236, 0.78))',
  tabActiveBg: 'linear-gradient(140deg, #2563eb, #60a5fa)',
  buttonBg: 'linear-gradient(135deg, rgba(217, 228, 245, 0.9), rgba(188, 205, 232, 0.86))',
  buttonBorder: '1px solid rgba(99, 127, 170, 0.45)',
  glassSheen: '0 14px 30px rgba(54, 83, 137, 0.25)',
  borderSoft: 'rgba(120, 150, 190, 0.38)',
  chipBg: 'rgba(120, 150, 190, 0.2)',
  chipBorder: '1px solid rgba(120, 150, 190, 0.35)',
  linkColor: '#2563eb',
  accent: '#2563eb',
  dangerBg: 'linear-gradient(135deg, rgba(190, 41, 41, 0.9), rgba(239, 68, 68, 0.9))',
  dangerBorder: '1px solid rgba(248, 113, 113, 0.78)',
  successBg: 'linear-gradient(135deg, rgba(20, 122, 75, 0.95), rgba(34, 197, 94, 0.95))',
  successBorder: '1px solid rgba(52, 211, 153, 0.78)',
  saveGradient: 'linear-gradient(95deg, #2563eb, #38bdf8)',
  saveBorder: '1px solid rgba(59, 130, 246, 0.6)',
  saveShadow: '0 20px 36px rgba(37, 99, 235, 0.45)',
};

function createUiTheme(overrides = {}) {
  return { ...BASE_UI_THEME, ...overrides };
}

const DEFAULT_UI_THEME = createUiTheme();


const APPEARANCE_SKINS = [
  {
    key: 'default',
    label: 'Default Control',
    description: 'Neutral chrome-lite mission console with woven fabric texture.',
    uiKey: 'default',
    appearance: {
      ...defaultAppearance(),
      fontColor: '#1f2a35',
      textBgColor: '#f4f8fb',
      textBgOpacity: 0.76,
      screenBgColor: '#dbe4f1',
      screenBgOpacity: 0.45,
      screenBgImage: '/media/skins/control-fabric.svg',
      screenBgImageEnabled: true,
      textAlign: 'left',
    },
    // Keep UI theme from Main
    ui: createUiTheme({
      headerBg: 'linear-gradient(135deg, rgba(234, 240, 251, 0.94), rgba(204, 216, 234, 0.9))',
      headerBorder: '1px solid rgba(116, 144, 186, 0.45)',
      headerShadow: '0 34px 62px rgba(45, 75, 120, 0.32)',
      headerFrameBg: 'linear-gradient(145deg, rgba(242, 247, 255, 0.95), rgba(214, 224, 241, 0.88))',
      headerFrameBorder: '1px solid rgba(128, 156, 204, 0.45)',
      headerFrameShadow: '0 20px 34px rgba(72, 104, 154, 0.32)',
      tabBg: 'linear-gradient(135deg, rgba(228, 235, 249, 0.86), rgba(202, 214, 236, 0.82))',
      tabActiveBg: 'linear-gradient(140deg, #2563eb, #60a5fa)',
      buttonBg: 'linear-gradient(135deg, rgba(222, 232, 247, 0.92), rgba(193, 207, 232, 0.88))',
      buttonBorder: '1px solid rgba(128, 156, 204, 0.45)',
      glassSheen: '0 14px 34px rgba(66, 98, 150, 0.26)',
      borderSoft: 'rgba(138, 162, 206, 0.38)',
      chipBg: 'rgba(138, 162, 206, 0.2)',
      chipBorder: '1px solid rgba(138, 162, 206, 0.35)',
      linkColor: '#2563eb',
      accent: '#2563eb',
      saveGradient: 'linear-gradient(100deg, #2563eb, #60a5fa)',
      saveBorder: '1px solid rgba(116, 144, 186, 0.6)',
      saveShadow: '0 20px 36px rgba(68, 104, 160, 0.32)',
    }),
  },
  {
    key: 'space-military',
    label: 'Space Military Command',
    description: 'Jet cockpit chrome and brushed metal HUD piping.',
    uiKey: 'space-military',
    appearance: {
      ...defaultAppearance(),
      fontFamily: '"Orbitron", "Rajdhani", "Segoe UI", sans-serif',
      fontSizePx: 26,
      fontColor: '#14253a',
      textBgColor: '#f3f8ff',
      textBgOpacity: 0.7,
      screenBgColor: '#d6e2f2',
      screenBgOpacity: 0.5,
      screenBgImage: '/media/skins/space-metal.svg',
      screenBgImageEnabled: true,
      textAlign: 'center',
      textVertical: 'top',
    },
    // Keep UI theme from Main
    ui: createUiTheme({
      headerBg: 'linear-gradient(140deg, rgba(9, 18, 32, 0.96), rgba(26, 48, 74, 0.88))',
      headerBorder: '1px solid rgba(68, 112, 178, 0.55)',
      headerShadow: '0 42px 72px rgba(5, 12, 24, 0.68)',
      headerFrameBg: 'linear-gradient(150deg, rgba(12, 26, 44, 0.96), rgba(32, 60, 96, 0.88))',
      headerFrameBorder: '1px solid rgba(82, 140, 210, 0.65)',
      headerFrameShadow: '0 24px 36px rgba(10, 24, 48, 0.62)',
      tabBg: 'linear-gradient(135deg, rgba(16, 32, 54, 0.86), rgba(34, 60, 94, 0.86))',
      tabActiveBg: 'linear-gradient(145deg, #0ea5e9, #38bdf8)',
      buttonBg: 'linear-gradient(135deg, rgba(12, 28, 48, 0.92), rgba(28, 52, 86, 0.88))',
      buttonBorder: '1px solid rgba(64, 116, 188, 0.62)',
      glassSheen: '0 18px 40px rgba(6, 20, 36, 0.6)',
      borderSoft: 'rgba(64, 100, 148, 0.5)',
      chipBg: 'rgba(56, 101, 162, 0.28)',
      chipBorder: '1px solid rgba(66, 118, 188, 0.48)',
      linkColor: '#7dd3fc',
      accent: '#38bdf8',
      saveGradient: 'linear-gradient(115deg, #0ea5e9, #38bdf8)',
      saveBorder: '1px solid rgba(64, 130, 200, 0.7)',
      saveShadow: '0 24px 40px rgba(12, 40, 78, 0.6)',
    }),
  },
  {
    key: 'military-desert',
    label: 'Desert Ops',
    description: 'Sun-baked armor plating with sandy cactus silhouettes.',
    uiKey: 'military-desert',
    appearance: {
      ...defaultAppearance(),
      fontFamily: '"Copperplate", "Trebuchet MS", "Segoe UI", sans-serif',
      fontSizePx: 24,
      fontColor: '#3b2a16',
      textBgColor: '#fff4de',
      textBgOpacity: 0.76,
      screenBgColor: '#f1ddbc',
      screenBgOpacity: 0.55,
      screenBgImage: '/media/skins/desert-canvas.svg',
      screenBgImageEnabled: true,
      textAlign: 'center',
      textVertical: 'top',
    },
    // Keep UI theme from Main
    ui: createUiTheme({
      headerBg: 'linear-gradient(130deg, rgba(248, 231, 196, 0.94), rgba(224, 193, 141, 0.9))',
      headerBorder: '1px solid rgba(148, 110, 68, 0.52)',
      headerShadow: '0 38px 68px rgba(107, 82, 45, 0.4)',
      headerFrameBg: 'linear-gradient(150deg, rgba(245, 220, 180, 0.92), rgba(229, 197, 152, 0.86))',
      headerFrameBorder: '1px solid rgba(168, 128, 72, 0.55)',
      headerFrameShadow: '0 20px 32px rgba(122, 82, 40, 0.42)',
      tabBg: 'linear-gradient(135deg, rgba(242, 214, 168, 0.86), rgba(228, 190, 132, 0.82))',
      tabActiveBg: 'linear-gradient(140deg, #d97706, #fbbf24)',
      buttonBg: 'linear-gradient(135deg, rgba(243, 215, 170, 0.9), rgba(227, 189, 128, 0.86))',
      buttonBorder: '1px solid rgba(182, 134, 72, 0.55)',
      glassSheen: '0 16px 34px rgba(182, 121, 54, 0.32)',
      borderSoft: 'rgba(182, 134, 72, 0.42)',
      chipBg: 'rgba(214, 162, 90, 0.24)',
      chipBorder: '1px solid rgba(184, 132, 68, 0.45)',
      linkColor: '#b45309',
      accent: '#d97706',
      saveGradient: 'linear-gradient(110deg, #b45309, #f97316)',
      saveBorder: '1px solid rgba(210, 140, 80, 0.55)',
      saveShadow: '0 20px 32px rgba(182, 120, 58, 0.4)',
    }),
  },
  {
    key: 'forest-outpost',
    label: 'Forest Outpost',
    description: 'Leaf canopy, wood grain, and moss-lit control glass.',
    uiKey: 'forest-outpost',
    appearance: {
      ...defaultAppearance(),
      fontFamily: '"Merriweather Sans", "Gill Sans", "Segoe UI", sans-serif',
      fontSizePx: 24,
      fontColor: '#1f2d1f',
      textBgColor: '#edf8e6',
      textBgOpacity: 0.74,
      screenBgColor: '#d4ebcc',
      screenBgOpacity: 0.54,
      screenBgImage: '/media/skins/forest-foliage.svg',
      screenBgImageEnabled: true,
      textAlign: 'left',
      textVertical: 'top',
    },
    // Keep UI theme from Main
    ui: createUiTheme({
      headerBg: 'linear-gradient(135deg, rgba(36, 64, 46, 0.92), rgba(20, 42, 28, 0.9))',
      headerBorder: '1px solid rgba(56, 102, 74, 0.48)',
      headerShadow: '0 40px 70px rgba(12, 30, 20, 0.55)',
      headerFrameBg: 'linear-gradient(150deg, rgba(32, 58, 42, 0.94), rgba(18, 40, 28, 0.88))',
      headerFrameBorder: '1px solid rgba(72, 122, 92, 0.55)',
      headerFrameShadow: '0 22px 34px rgba(12, 30, 20, 0.5)',
      tabBg: 'linear-gradient(135deg, rgba(44, 80, 56, 0.86), rgba(28, 60, 38, 0.84))',
      tabActiveBg: 'linear-gradient(140deg, #16a34a, #4ade80)',
      buttonBg: 'linear-gradient(135deg, rgba(38, 74, 48, 0.9), rgba(24, 52, 32, 0.88))',
      buttonBorder: '1px solid rgba(66, 122, 88, 0.55)',
      glassSheen: '0 18px 36px rgba(12, 36, 22, 0.5)',
      borderSoft: 'rgba(76, 128, 96, 0.46)',
      chipBg: 'rgba(74, 122, 94, 0.28)',
      chipBorder: '1px solid rgba(74, 122, 94, 0.45)',
      linkColor: '#34d399',
      accent: '#22c55e',
      saveGradient: 'linear-gradient(120deg, #16a34a, #4ade80)',
      saveBorder: '1px solid rgba(52, 140, 96, 0.6)',
      saveShadow: '0 24px 38px rgba(14, 44, 24, 0.55)',
    }),
  },
  {
    key: 'starfield',
    label: 'Starfield Observatory',
    description: 'Soft starfield glass with nebula shimmer and chrome trim.',
    uiKey: 'starfield',
    appearance: {
      ...defaultAppearance(),
      fontFamily: '"Exo 2", "Segoe UI", sans-serif',
      fontSizePx: 22,
      fontColor: '#1f2648',
      textBgColor: '#eef1ff',
      textBgOpacity: 0.7,
      screenBgColor: '#d7def6',
      screenBgOpacity: 0.5,
      screenBgImage: '/media/skins/starfield-soft.svg',
      screenBgImageEnabled: true,
      textAlign: 'center',
      textVertical: 'top',
    },
    // Keep UI theme from Main
    ui: createUiTheme({
      headerBg: 'linear-gradient(150deg, rgba(27, 33, 68, 0.94), rgba(18, 26, 58, 0.9))',
      headerBorder: '1px solid rgba(90, 112, 198, 0.55)',
      headerShadow: '0 42px 74px rgba(10, 14, 38, 0.58)',
      headerFrameBg: 'linear-gradient(150deg, rgba(36, 44, 88, 0.96), rgba(24, 30, 64, 0.92))',
      headerFrameBorder: '1px solid rgba(108, 132, 220, 0.58)',
      headerFrameShadow: '0 24px 38px rgba(14, 18, 48, 0.54)',
      tabBg: 'linear-gradient(135deg, rgba(34, 44, 88, 0.85), rgba(22, 30, 68, 0.83))',
      tabActiveBg: 'linear-gradient(145deg, #6366f1, #38bdf8)',
      buttonBg: 'linear-gradient(135deg, rgba(28, 36, 78, 0.92), rgba(18, 26, 62, 0.9))',
      buttonBorder: '1px solid rgba(104, 132, 220, 0.58)',
      glassSheen: '0 18px 38px rgba(12, 16, 42, 0.55)',
      borderSoft: 'rgba(104, 132, 220, 0.46)',
      chipBg: 'rgba(104, 132, 220, 0.26)',
      chipBorder: '1px solid rgba(104, 132, 220, 0.45)',
      linkColor: '#93c5fd',
      accent: '#6366f1',
      saveGradient: 'linear-gradient(115deg, #4c51bf, #38bdf8)',
      saveBorder: '1px solid rgba(108, 132, 220, 0.6)',
      saveShadow: '0 24px 40px rgba(18, 24, 68, 0.58)',
    }),
  },
  {
    key: 'cartoon-bubbles',
    label: 'Cartoon Bubbles',
    description: 'High-def balloons, candy gloss, and playful fonts.',
    uiKey: 'cartoon-bubbles',
    appearance: {
      ...defaultAppearance(),
      fontFamily: '"Baloo 2", "Comic Sans MS", "Segoe UI", sans-serif',
      fontSizePx: 28,
      fontColor: '#4b2c6c',
      textBgColor: '#fff1ff',
      textBgOpacity: 0.68,
      screenBgColor: '#f2dfff',
      screenBgOpacity: 0.55,
      screenBgImage: '/media/skins/cartoon-balloons.svg',
      screenBgImageEnabled: true,
      textAlign: 'center',
      textVertical: 'top',
    },
    // Keep UI theme from Main
    ui: createUiTheme({
      headerBg: 'linear-gradient(140deg, rgba(255, 229, 255, 0.94), rgba(240, 205, 255, 0.9))',
      headerBorder: '1px solid rgba(171, 119, 206, 0.5)',
      headerShadow: '0 34px 64px rgba(120, 64, 160, 0.32)',
      headerFrameBg: 'linear-gradient(150deg, rgba(255, 235, 255, 0.95), rgba(245, 210, 255, 0.88))',
      headerFrameBorder: '1px solid rgba(190, 132, 220, 0.5)',
      headerFrameShadow: '0 22px 34px rgba(140, 82, 190, 0.32)',
      tabBg: 'linear-gradient(135deg, rgba(250, 228, 255, 0.88), rgba(238, 206, 255, 0.84))',
      tabActiveBg: 'linear-gradient(140deg, #d946ef, #f472b6)',
      buttonBg: 'linear-gradient(135deg, rgba(250, 226, 255, 0.92), rgba(236, 200, 255, 0.88))',
      buttonBorder: '1px solid rgba(200, 144, 220, 0.48)',
      glassSheen: '0 14px 34px rgba(184, 104, 204, 0.28)',
      borderSoft: 'rgba(200, 150, 220, 0.42)',
      chipBg: 'rgba(214, 162, 230, 0.28)',
      chipBorder: '1px solid rgba(200, 150, 220, 0.42)',
      linkColor: '#f472b6',
      accent: '#d946ef',
      saveGradient: 'linear-gradient(120deg, #d946ef, #f472b6)',
      saveBorder: '1px solid rgba(208, 128, 220, 0.58)',
      saveShadow: '0 20px 34px rgba(184, 96, 204, 0.32)',
    }),
  },
  {
    key: 'chrome-luminous',
    label: 'Chrome Luminous',
    description: 'Polished chrome with soft sky reflections and nav console glow.',
    uiKey: 'chrome-luminous',
    appearance: {
      ...defaultAppearance(),
      fontFamily: '"Rajdhani", "Segoe UI", sans-serif',
      fontSizePx: 24,
      fontColor: '#1a2335',
      textBgColor: '#f5f9ff',
      textBgOpacity: 0.72,
      screenBgColor: '#dde6f5',
      screenBgOpacity: 0.42,
      screenBgImage: '/media/skins/chrome-luminous.svg',
      screenBgImageEnabled: true,
      textAlign: 'center',
      textVertical: 'top',
    },
    // Keep UI theme from Main
    ui: createUiTheme({
      headerBg: 'linear-gradient(145deg, rgba(226, 238, 255, 0.94), rgba(198, 210, 230, 0.9))',
      headerBorder: '1px solid rgba(126, 152, 190, 0.45)',
      headerShadow: '0 36px 66px rgba(45, 70, 110, 0.32)',
      headerFrameBg: 'linear-gradient(150deg, rgba(236, 244, 255, 0.96), rgba(204, 216, 236, 0.9))',
      headerFrameBorder: '1px solid rgba(142, 170, 210, 0.45)',
      headerFrameShadow: '0 22px 36px rgba(52, 82, 128, 0.34)',
      tabBg: 'linear-gradient(135deg, rgba(228, 238, 252, 0.86), rgba(206, 218, 236, 0.82))',
      tabActiveBg: 'linear-gradient(145deg, #38bdf8, #818cf8)',
      buttonBg: 'linear-gradient(135deg, rgba(220, 232, 248, 0.92), rgba(198, 210, 234, 0.88))',
      buttonBorder: '1px solid rgba(136, 162, 202, 0.48)',
      glassSheen: '0 18px 38px rgba(68, 98, 140, 0.3)',
      borderSoft: 'rgba(140, 170, 210, 0.42)',
      chipBg: 'rgba(168, 190, 226, 0.24)',
      chipBorder: '1px solid rgba(140, 170, 210, 0.42)',
      linkColor: '#60a5fa',
      accent: '#38bdf8',
      saveGradient: 'linear-gradient(115deg, #38bdf8, #818cf8)',
      saveBorder: '1px solid rgba(148, 170, 210, 0.55)',
      saveShadow: '0 22px 38px rgba(72, 102, 148, 0.3)',
    }),
  },
  {
    key: 'desert-horizon',
    label: 'Desert Horizon',
    description: 'Pale dunes, mirage chrome and cactus silhouettes at sunrise.',
    uiKey: 'desert-horizon',
    appearance: {
      ...defaultAppearance(),
      fontFamily: '"Montserrat", "Segoe UI", sans-serif',
      fontSizePx: 24,
      fontColor: '#3f2d18',
      textBgColor: '#fff6e6',
      textBgOpacity: 0.74,
      screenBgColor: '#f3dfc1',
      screenBgOpacity: 0.48,
      screenBgImage: '/media/skins/desert-horizon.svg',
      screenBgImageEnabled: true,
      textAlign: 'center',
      textVertical: 'top',
    },
    // Keep UI theme from Main
    ui: createUiTheme({
      headerBg: 'linear-gradient(135deg, rgba(255, 225, 196, 0.94), rgba(246, 196, 160, 0.9))',
      headerBorder: '1px solid rgba(196, 124, 92, 0.5)',
      headerShadow: '0 36px 62px rgba(158, 96, 62, 0.35)',
      headerFrameBg: 'linear-gradient(150deg, rgba(255, 232, 210, 0.95), rgba(244, 204, 170, 0.88))',
      headerFrameBorder: '1px solid rgba(210, 140, 100, 0.5)',
      headerFrameShadow: '0 20px 32px rgba(162, 102, 68, 0.35)',
      tabBg: 'linear-gradient(135deg, rgba(252, 222, 192, 0.86), rgba(242, 198, 160, 0.82))',
      tabActiveBg: 'linear-gradient(140deg, #f97316, #facc15)',
      buttonBg: 'linear-gradient(135deg, rgba(250, 220, 192, 0.9), rgba(240, 196, 156, 0.86))',
      buttonBorder: '1px solid rgba(210, 144, 102, 0.52)',
      glassSheen: '0 16px 34px rgba(210, 132, 84, 0.3)',
      borderSoft: 'rgba(210, 144, 102, 0.42)',
      chipBg: 'rgba(222, 162, 110, 0.26)',
      chipBorder: '1px solid rgba(210, 144, 102, 0.44)',
      linkColor: '#f97316',
      accent: '#f97316',
      saveGradient: 'linear-gradient(120deg, #f97316, #facc15)',
      saveBorder: '1px solid rgba(232, 146, 104, 0.55)',
      saveShadow: '0 20px 34px rgba(210, 128, 82, 0.32)',
    }),
  },
  {
    key: 'forest-meadow',
    label: 'Forest Meadow',
    description: 'Sunlit canopy with moss glass, bark piping, and flower flecks.',
    uiKey: 'forest-meadow',
    appearance: {
      ...defaultAppearance(),
      fontFamily: '"Merriweather Sans", "Gill Sans", "Segoe UI", sans-serif',
      fontSizePx: 24,
      fontColor: '#20331e',
      textBgColor: '#f2faed',
      textBgOpacity: 0.76,
      screenBgColor: '#dcedd2',
      screenBgOpacity: 0.5,
      screenBgImage: '/media/skins/forest-meadow.svg',
      screenBgImageEnabled: true,
      textAlign: 'left',
      textVertical: 'top',
    },
    // Keep UI theme from Main
    ui: createUiTheme({
      headerBg: 'linear-gradient(140deg, rgba(54, 84, 44, 0.92), rgba(34, 58, 30, 0.9))',
      headerBorder: '1px solid rgba(74, 122, 64, 0.48)',
      headerShadow: '0 40px 70px rgba(20, 36, 18, 0.52)',
      headerFrameBg: 'linear-gradient(150deg, rgba(48, 78, 38, 0.94), rgba(32, 58, 28, 0.9))',
      headerFrameBorder: '1px solid rgba(96, 146, 84, 0.52)',
      headerFrameShadow: '0 22px 34px rgba(20, 36, 18, 0.48)',
      tabBg: 'linear-gradient(135deg, rgba(64, 100, 52, 0.86), rgba(42, 74, 38, 0.84))',
      tabActiveBg: 'linear-gradient(140deg, #22c55e, #a3e635)',
      buttonBg: 'linear-gradient(135deg, rgba(58, 92, 48, 0.9), rgba(38, 62, 34, 0.88))',
      buttonBorder: '1px solid rgba(88, 138, 70, 0.52)',
      glassSheen: '0 18px 36px rgba(18, 34, 18, 0.48)',
      borderSoft: 'rgba(102, 152, 86, 0.42)',
      chipBg: 'rgba(108, 160, 90, 0.26)',
      chipBorder: '1px solid rgba(98, 148, 84, 0.44)',
      linkColor: '#4ade80',
      accent: '#22c55e',
      saveGradient: 'linear-gradient(120deg, #22c55e, #a3e635)',
      saveBorder: '1px solid rgba(118, 168, 94, 0.55)',
      saveShadow: '0 24px 36px rgba(26, 52, 24, 0.5)',
    }),
  },
  {
    key: 'starfield-dawn',
    label: 'Starfield Dawn',
    description: 'Lavender nebula glass with chrome rails and early starlight.',
    uiKey: 'starfield-dawn',
    appearance: {
      ...defaultAppearance(),
      fontFamily: '"Exo 2", "Segoe UI", sans-serif',
      fontSizePx: 23,
      fontColor: '#262a58',
      textBgColor: '#f4f0ff',
      textBgOpacity: 0.7,
      screenBgColor: '#e0dcfa',
      screenBgOpacity: 0.46,
      screenBgImage: '/media/skins/starfield-dawn.svg',
      screenBgImageEnabled: true,
      textAlign: 'center',
      textVertical: 'top',
    },
    // Keep UI theme from Main
    ui: createUiTheme({
      headerBg: 'linear-gradient(150deg, rgba(222, 209, 255, 0.94), rgba(192, 178, 246, 0.9))',
      headerBorder: '1px solid rgba(142, 116, 208, 0.5)',
      headerShadow: '0 40px 68px rgba(94, 72, 168, 0.38)',
      headerFrameBg: 'linear-gradient(155deg, rgba(232, 220, 255, 0.95), rgba(204, 190, 248, 0.9))',
      headerFrameBorder: '1px solid rgba(156, 132, 216, 0.5)',
      headerFrameShadow: '0 22px 36px rgba(104, 82, 176, 0.38)',
      tabBg: 'linear-gradient(135deg, rgba(230, 218, 255, 0.88), rgba(204, 190, 246, 0.84))',
      tabActiveBg: 'linear-gradient(140deg, #7c3aed, #f472b6)',
      buttonBg: 'linear-gradient(135deg, rgba(226, 214, 255, 0.92), rgba(202, 188, 246, 0.88))',
      buttonBorder: '1px solid rgba(156, 132, 216, 0.5)',
      glassSheen: '0 18px 38px rgba(128, 96, 198, 0.32)',
      borderSoft: 'rgba(156, 132, 216, 0.42)',
      chipBg: 'rgba(176, 150, 224, 0.26)',
      chipBorder: '1px solid rgba(156, 132, 216, 0.44)',
      linkColor: '#a855f7',
      accent: '#7c3aed',
      saveGradient: 'linear-gradient(120deg, #7c3aed, #f472b6)',
      saveBorder: '1px solid rgba(162, 132, 224, 0.55)',
      saveShadow: '0 22px 36px rgba(118, 88, 196, 0.36)',
    }),
  },
  {
    key: 'cartoon-parade',
    label: 'Cartoon Parade',
    description: 'High-energy balloons, confetti piping, and carnival gloss.',
    uiKey: 'cartoon-parade',
    appearance: {
      ...defaultAppearance(),
      fontFamily: '"Baloo 2", "Comic Sans MS", "Segoe UI", sans-serif',
      fontSizePx: 30,
      fontColor: '#4a256a',
      textBgColor: '#fff4ff',
      textBgOpacity: 0.7,
      screenBgColor: '#f7e4ff',
      screenBgOpacity: 0.52,
      screenBgImage: '/media/skins/cartoon-parade.svg',
      screenBgImageEnabled: true,
      textAlign: 'center',
      textVertical: 'top',
    },
    // Keep UI theme from Main
    ui: createUiTheme({
      headerBg: 'linear-gradient(140deg, rgba(255, 224, 244, 0.94), rgba(255, 200, 214, 0.9))',
      headerBorder: '1px solid rgba(220, 110, 150, 0.5)',
      headerShadow: '0 34px 60px rgba(200, 80, 130, 0.32)',
      headerFrameBg: 'linear-gradient(155deg, rgba(255, 232, 248, 0.95), rgba(252, 208, 220, 0.88))',
      headerFrameBorder: '1px solid rgba(224, 126, 160, 0.48)',
      headerFrameShadow: '0 20px 32px rgba(210, 90, 148, 0.3)',
      tabBg: 'linear-gradient(135deg, rgba(255, 226, 242, 0.86), rgba(253, 204, 220, 0.82))',
      tabActiveBg: 'linear-gradient(145deg, #f97316, #ec4899)',
      buttonBg: 'linear-gradient(135deg, rgba(255, 224, 240, 0.92), rgba(250, 200, 216, 0.88))',
      buttonBorder: '1px solid rgba(232, 132, 168, 0.48)',
      glassSheen: '0 16px 34px rgba(232, 96, 160, 0.28)',
      borderSoft: 'rgba(232, 140, 170, 0.42)',
      chipBg: 'rgba(238, 162, 186, 0.26)',
      chipBorder: '1px solid rgba(232, 140, 170, 0.42)',
      linkColor: '#ec4899',
      accent: '#f97316',
      saveGradient: 'linear-gradient(120deg, #f97316, #ec4899)',
      saveBorder: '1px solid rgba(236, 134, 170, 0.55)',
      saveShadow: '0 20px 34px rgba(220, 96, 146, 0.32)',
    }),
  },
  {
    key: 'arctic-lab',
    label: 'Arctic Lab',
    description: 'Glacial glass, mint piping, and frosted chrome instrumentation.',
    uiKey: 'arctic-lab',
    appearance: {
      ...defaultAppearance(),
      fontFamily: '"Titillium Web", "Segoe UI", sans-serif',
      fontSizePx: 24,
      fontColor: '#133246',
      textBgColor: '#f2fbff',
      textBgOpacity: 0.72,
      screenBgColor: '#d5eef5',
      screenBgOpacity: 0.45,
      screenBgImage: '/media/skins/arctic-lab.svg',
      screenBgImageEnabled: true,
      textAlign: 'center',
      textVertical: 'top',
    },
    // Keep UI theme from Main
    ui: createUiTheme({
      headerBg: 'linear-gradient(145deg, rgba(210, 240, 252, 0.94), rgba(178, 224, 244, 0.9))',
      headerBorder: '1px solid rgba(88, 150, 190, 0.48)',
      headerShadow: '0 36px 64px rgba(46, 100, 132, 0.32)',
      headerFrameBg: 'linear-gradient(155deg, rgba(220, 244, 255, 0.95), rgba(190, 230, 246, 0.9))',
      headerFrameBorder: '1px solid rgba(104, 170, 206, 0.48)',
      headerFrameShadow: '0 22px 34px rgba(52, 112, 146, 0.34)',
      tabBg: 'linear-gradient(135deg, rgba(214, 240, 252, 0.86), rgba(184, 226, 244, 0.82))',
      tabActiveBg: 'linear-gradient(140deg, #06b6d4, #38bdf8)',
      buttonBg: 'linear-gradient(135deg, rgba(210, 236, 250, 0.92), rgba(184, 220, 240, 0.88))',
      buttonBorder: '1px solid rgba(108, 180, 214, 0.48)',
      glassSheen: '0 18px 36px rgba(46, 120, 152, 0.3)',
      borderSoft: 'rgba(108, 180, 214, 0.42)',
      chipBg: 'rgba(124, 192, 220, 0.24)',
      chipBorder: '1px solid rgba(108, 180, 214, 0.42)',
      linkColor: '#06b6d4',
      accent: '#06b6d4',
      saveGradient: 'linear-gradient(120deg, #06b6d4, #38bdf8)',
      saveBorder: '1px solid rgba(116, 188, 220, 0.55)',
      saveShadow: '0 22px 36px rgba(64, 132, 168, 0.32)',
    }),
  },
];
const APPEARANCE_SKIN_MAP = new Map(APPEARANCE_SKINS.map((skin) => [skin.key, skin]));
const ADMIN_SKIN_TO_UI = new Map(APPEARANCE_SKINS.map((skin) => [skin.key, skin.uiKey || skin.key]));
// Keep UI Theme Map from Main
const UI_THEME_MAP = new Map(
  APPEARANCE_SKINS.map((skin) => [skin.uiKey || skin.key, skin.ui || DEFAULT_UI_THEME]),
);
const DEFAULT_SKIN_PRESET = APPEARANCE_SKIN_MAP.get(DEFAULT_APPEARANCE_SKIN);
const DEFAULT_UI_SKIN = ADMIN_SKIN_TO_UI.get(DEFAULT_APPEARANCE_SKIN) || DEFAULT_APPEARANCE_SKIN;

function applyAdminUiThemeForDocument(skinKey, appearance, tone = 'light') {
  if (typeof document === 'undefined') return;
  const body = document.body;
  if (!body) return;
  const root = document.documentElement;
  const uiKey = ADMIN_SKIN_TO_UI.get(skinKey) || DEFAULT_UI_SKIN;
  const normalizedTone = normalizeTone(tone);
  const background = appearanceBackgroundStyle(appearance, normalizedTone);
  const surfaces = surfaceStylesFromAppearance(appearance, normalizedTone);
  const overlay = clamp(Number(appearance?.screenBgOpacity ?? 0), 0, 1);
  const fontSize = clamp(Number(appearance?.fontSizePx ?? 22), 10, 72);
  const fontFamily = appearance?.fontFamily || '';
  const textColor = normalizedTone === 'dark'
    ? '#f4f7ff'
    : (appearance?.fontColor || '#1f2d3a');
  const textBg = `rgba(${hexToRgb(appearance?.textBgColor || '#000000')}, ${clamp(Number(appearance?.textBgOpacity ?? 0), 0, 1)})`;
  const mutedColor = normalizedTone === 'dark'
    ? 'rgba(198, 212, 236, 0.78)'
    : 'rgba(36, 52, 72, 0.68)';
  const inputBg = normalizedTone === 'dark'
    ? `rgba(12, 18, 28, ${clamp(0.78 + overlay * 0.12, 0.72, 0.92)})`
    : `rgba(255, 255, 255, ${clamp(0.88 - overlay * 0.28, 0.55, 0.97)})`;
  const inputBorder = normalizedTone === 'dark'
    ? '1px solid rgba(132, 176, 226, 0.42)'
    : '1px solid rgba(128, 156, 204, 0.42)';
  const buttonColor = normalizedTone === 'dark' ? '#f4f7ff' : '#0e1c2e';
  body.dataset.skin = uiKey;
  body.dataset.tone = normalizedTone;
  body.style.backgroundColor = background.backgroundColor || '';
  body.style.backgroundImage = background.backgroundImage || 'none';
  body.style.backgroundSize = background.backgroundSize || '';
  body.style.backgroundRepeat = background.backgroundRepeat || '';
  body.style.backgroundPosition = background.backgroundPosition || '';
  body.style.backgroundBlendMode = background.backgroundBlendMode || '';
  body.style.setProperty('--appearance-panel-bg', surfaces.panelBg);
  body.style.setProperty('--appearance-panel-border', surfaces.panelBorder);
  body.style.setProperty('--appearance-panel-shadow', surfaces.panelShadow);
  body.style.setProperty('--appearance-piping-opacity', String(surfaces.pipingOpacity));
  body.style.setProperty('--appearance-piping-shadow', surfaces.pipingShadow);
  body.style.setProperty('--appearance-screen-overlay', String(overlay));
  body.style.setProperty('--admin-body-color', textColor);
  body.style.setProperty('--admin-muted', mutedColor);
  body.style.setProperty('--admin-input-bg', inputBg);
  body.style.setProperty('--admin-input-border', inputBorder);
  body.style.setProperty('--admin-input-color', textColor);
  body.style.setProperty('--admin-button-color', buttonColor);
  // Keep UI Theme variable setting from Main
  const uiTheme = UI_THEME_MAP.get(uiKey) || DEFAULT_UI_THEME;
  const themeVariables = {
    '--admin-header-bg': uiTheme.headerBg,
    '--admin-header-border': uiTheme.headerBorder,
    '--admin-header-shadow': uiTheme.headerShadow,
    '--admin-header-blur': uiTheme.headerBlur,
    '--admin-header-frame-bg': uiTheme.headerFrameBg,
    '--admin-header-frame-border': uiTheme.headerFrameBorder,
    '--admin-header-frame-shadow': uiTheme.headerFrameShadow,
    '--admin-tab-bg': uiTheme.tabBg,
    '--admin-tab-active-bg': uiTheme.tabActiveBg,
    '--admin-button-bg': uiTheme.buttonBg,
    '--admin-button-border': uiTheme.buttonBorder,
    '--admin-glass-sheen': uiTheme.glassSheen,
    '--admin-border-soft': uiTheme.borderSoft,
    '--admin-chip-bg': uiTheme.chipBg,
    '--admin-chip-border': uiTheme.chipBorder,
    '--admin-link-color': uiTheme.linkColor,
    '--admin-accent': uiTheme.accent,
    '--admin-danger-bg': uiTheme.dangerBg,
    '--admin-danger-border': uiTheme.dangerBorder,
    '--admin-success-bg': uiTheme.successBg,
    '--admin-success-border': uiTheme.successBorder,
    '--admin-save-gradient': uiTheme.saveGradient,
    '--admin-save-border': uiTheme.saveBorder,
    '--admin-save-shadow': uiTheme.saveShadow,
  };
  Object.entries(themeVariables).forEach(([cssVar, value]) => {
    if (value) body.style.setProperty(cssVar, value);
    else body.style.removeProperty(cssVar);
  });
  if (appearance?.screenBgImage && appearance?.screenBgImageEnabled !== false) {
    body.style.setProperty('--appearance-panel-surface', 'none');
  } else {
    body.style.removeProperty('--appearance-panel-surface');
  }
  body.dataset.panelDepth = appearance?.panelDepth === false ? 'flat' : 'deep';
  if (root) {
    if (fontFamily) root.style.setProperty('--appearance-font-family', fontFamily);
    else root.style.removeProperty('--appearance-font-family');
    root.style.setProperty('--appearance-font-size', `${fontSize}px`);
    root.style.setProperty('--appearance-font-color', textColor);
    root.style.setProperty('--appearance-text-bg', textBg);
  }
}


function isAppearanceEqual(a, b) {
  if (!a || !b) return false;
  const keys = [
    'fontFamily',
    'fontSizePx',
    'fontColor',
    'textBgColor',
    'textBgOpacity',
    'screenBgColor',
    'screenBgOpacity',
    'screenBgImage',
    'screenBgImageEnabled',
    'textAlign',
    'textVertical',
    'panelDepth',
  ];
  return keys.every((key) => {
    const av = a[key];
    const bv = b[key];
    if (typeof av === 'number' || typeof bv === 'number') {
      return Math.abs(Number(av ?? 0) - Number(bv ?? 0)) < 0.0001;
    }
    return String(av ?? '') === String(bv ?? '');
  });
}
function detectAppearanceSkin(appearance, fallbackKey) {
  if (fallbackKey && APPEARANCE_SKIN_MAP.has(fallbackKey)) {
    const preset = APPEARANCE_SKIN_MAP.get(fallbackKey);
    if (preset && isAppearanceEqual(appearance, preset.appearance)) return fallbackKey;
  }
  for (const skin of APPEARANCE_SKINS) {
    if (isAppearanceEqual(appearance, skin.appearance)) return skin.key;
  }
  return 'custom';
}
const DEFAULT_ICONS = { missions:[], devices:[], rewards:[] };

function normalizeGameMetadata(cfg, slug = '') {
  const base = { ...(cfg || {}) };
  const game = { ...(base.game || {}) };
  const rawTags = Array.isArray(game.tags) ? game.tags : [];
  const cleaned = [];
  const seen = new Set();
  rawTags.forEach((tag) => {
    const str = String(tag || '').trim();
    if (!str) return;
    const key = str.toLowerCase();
    if (seen.has(key)) return;
    seen.add(key);
    cleaned.push(str);
  });
  const normalizedSlug = (slug || '').toString().trim().toLowerCase() || 'default';
  if (!seen.has(normalizedSlug)) {
    cleaned.push(normalizedSlug);
    seen.add(normalizedSlug);
  }
  if (normalizedSlug === 'default' && !seen.has('default-game')) {
    cleaned.push('default-game');
    seen.add('default-game');
  }
  const normalizedTitle = (game.title || '').toString().trim();
  const normalizedType = (game.type || '').toString().trim();
  const normalizedCover = typeof game.coverImage === 'string' ? game.coverImage.trim() : '';
  const normalizedShort = typeof game.shortDescription === 'string' ? game.shortDescription.trim() : '';
  const normalizedLong = typeof game.longDescription === 'string' ? game.longDescription.trim() : '';
  // Merge: Add playerCount normalization from codex branch
  const normalizedPlayers = Number(game.playerCount || 1);
  game.tags = cleaned;
  game.title = normalizedTitle || 'Default Game';
  game.type = normalizedType || 'Mystery';
  game.coverImage = normalizedCover;
  game.shortDescription = normalizedShort;
  game.longDescription = normalizedLong;
  // Merge: Add playerCount normalization from codex branch
  game.playerCount = [1, 2, 4].includes(normalizedPlayers) ? normalizedPlayers : 1;
  game.slug = normalizedSlug;
  game.deployEnabled = game.deployEnabled === true;
  base.game = game;
  return base;
}


function slugifyTitle(value) {
  return String(value || '')
    .toLowerCase()
    .replace(/['"]/g, '')
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')
    .slice(0, 48);
}

/* ───────────────────────── Root ───────────────────────── */
export default function Admin() {
  const gameEnabled = GAME_ENABLED;
  const [tab, setTab] = useState('missions');

  const [adminMeta, setAdminMeta] = useState(ADMIN_META_INITIAL_STATE);

  const [games, setGames] = useState([]);
  const [activeSlug, setActiveSlug] = useState('default'); // Default Game → legacy root
  const [showNewGame, setShowNewGame] = useState(false);
  const [newTitle, setNewTitle] = useState('');
  const [newType, setNewType] = useState('Mystery');
  const [newMode, setNewMode] = useState('single');
  const [newDurationMin, setNewDurationMin] = useState(0);
  const [newAlertMin, setNewAlertMin] = useState(10);
  const [newGameSlug, setNewGameSlug] = useState('');
  const [newSlugTouched, setNewSlugTouched] = useState(false);
  const [newShortDesc, setNewShortDesc] = useState('');
  const [newLongDesc, setNewLongDesc] = useState('');
  const [newCoverPreview, setNewCoverPreview] = useState('');
  const [newCoverFile, setNewCoverFile] = useState(null);
  const [newCoverSelectedUrl, setNewCoverSelectedUrl] = useState('');
  const [newCoverOptions, setNewCoverOptions] = useState([]);
  const [newCoverLookupLoading, setNewCoverLookupLoading] = useState(false);
  const [newGameStatus, setNewGameStatus] = useState('');
  const [newGameBusy, setNewGameBusy] = useState(false);
  const [newCoverDropActive, setNewCoverDropActive] = useState(false);
  const newGameCoverInputRef = useRef(null);

  const [missionActionFlash, setMissionActionFlash] = useState(false);
  const [deviceActionFlash, setDeviceActionFlash] = useState(false);
  const [newMissionButtonFlash, setNewMissionButtonFlash] = useState(false);
  const [addDeviceButtonFlash, setAddDeviceButtonFlash] = useState(false);
  const missionFlashTimeout = useRef(null);
  const deviceFlashTimeout = useRef(null);
  const missionButtonTimeout = useRef(null);
  const deviceButtonTimeout = useRef(null);

  const [protectionPrompt, setProtectionPrompt] = useState({
    open: false,
    mode: 'enable',
    requireConfirm: false,
    password: '',
    confirm: '',
    error: '',
  });

  function resetNewGameForm() {
    setNewTitle('');
    setNewType('Mystery');
    setNewMode('single');
    setNewDurationMin(0);
    setNewAlertMin(10);
    setNewGameSlug('');
    setNewSlugTouched(false);
    setNewShortDesc('');
    setNewLongDesc('');
    setNewCoverPreview('');
    setNewCoverFile(null);
    setNewCoverSelectedUrl('');
    setNewCoverOptions([]);
    setNewCoverLookupLoading(false);
    setNewGameStatus('');
    setNewGameBusy(false);
    setNewCoverDropActive(false);
    if (newGameCoverInputRef.current) newGameCoverInputRef.current.value = '';
  }

  function handleNewGameModalClose() {
    setShowNewGame(false);
    resetNewGameForm();
  }

  function handleNewSlugInput(value) {
    setNewSlugTouched(true);
    setNewGameSlug(slugifyTitle(value));
  }

  function clearNewGameCover() {
    setNewCoverPreview('');
    setNewCoverFile(null);
    setNewCoverSelectedUrl('');
  }

  async function handleNewGameCoverFile(file) {
    if (!file) return;
    const safeName = file.name || 'cover';
    const looksLikeImage = (file.type && file.type.startsWith('image/')) || EXTS.image.test(file.name || '');
    if (!looksLikeImage) {
      setNewGameStatus(`❌ ${safeName} must be an image file.`);
      return;
    }
    const sizeBytes = file.size || 0;
    if (sizeBytes > COVER_SIZE_LIMIT_BYTES) {
      const sizeKb = Math.max(1, Math.round(sizeBytes / 1024));
      setNewGameStatus(`❌ ${safeName} is ${sizeKb} KB — please choose an image under 1 MB.`);
      return;
    }
    try {
      const previewUrl = (typeof URL !== 'undefined' && typeof URL.createObjectURL === 'function')
        ? URL.createObjectURL(file)
        : '';
      setNewCoverPreview(previewUrl);
      setNewCoverFile(file);
      setNewCoverSelectedUrl('');
      setNewGameStatus('✅ Cover ready — it will upload when you create the game.');
    } catch (err) {
      setNewGameStatus(`❌ Unable to preview ${safeName}`);
    }
  }

  async function loadNewCoverOptions() {
    setNewCoverLookupLoading(true);
    try {
      const items = await listInventory(['covers','mediapool','uploads']);
      const filtered = (items || []).filter((item) => ['image', 'gif'].includes(item.type));
      setNewCoverOptions(filtered);
      if (!filtered.length) {
        setNewGameStatus('No reusable covers found yet. Try uploading one.');
      }
    } catch (err) {
      setNewGameStatus('❌ Unable to load media pool covers.');
      setNewCoverOptions([]);
    } finally {
      setNewCoverLookupLoading(false);
    }
  }

  function applyNewCoverFromUrl(url) {
    if (!url) return;
    const direct = toDirectMediaURL(url);
    setNewCoverSelectedUrl(url);
    setNewCoverPreview(direct);
    setNewCoverFile(null);
    setNewGameStatus('✅ Using cover from the media pool.');
  }

  async function handleCreateNewGame() {
    if (newGameBusy) return;
    const title = newTitle.trim();
    if (!title) {
      setNewGameStatus('❌ Title is required.');
      return;
    }
    const slugInput = (newGameSlug || slugifyTitle(title) || 'game').trim();
    if (!slugInput) {
      setNewGameStatus('❌ Please provide a slug for this game.');
      return;
    }
    setNewGameBusy(true);
    setNewGameStatus('Creating game…');
    let coverPath = newCoverSelectedUrl;
    try {
      if (!coverPath && newCoverFile) {
        coverPath = await uploadToRepo(newCoverFile, 'covers');
        if (!coverPath) throw new Error('Cover upload failed');
      }
      const res = await fetch('/api/games', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          title,
          type: newType,
          mode: newMode,
          slug: slugInput,
          shortDescription: newShortDesc.trim(),
          longDescription: newLongDesc.trim(),
          coverImage: coverPath,
          timer: { durationMinutes: newDurationMin, alertMinutes: newAlertMin },
        }),
      });
      const data = await res.json().catch(() => ({ ok: false }));
      if (!res.ok || data.ok === false) {
        throw new Error(data?.error || 'create failed');
      }
      await reloadGamesList();
      setActiveSlug(data.slug || slugInput || 'default');
      setStatus(`✅ Created game “${title}”`);
      setNewGameStatus('✅ Game created! Loading…');
      handleNewGameModalClose();
    } catch (err) {
      setNewGameStatus(`❌ ${(err?.message) || 'Unable to create game'}`);
    } finally {
      setNewGameBusy(false);
    }
  }

  useEffect(() => {
    if (newSlugTouched) return;
    setNewGameSlug(slugifyTitle(newTitle));
  }, [newTitle, newSlugTouched]);

  useEffect(() => {
    return () => {
      [missionFlashTimeout, deviceFlashTimeout, missionButtonTimeout, deviceButtonTimeout].forEach((ref) => {
        if (ref.current) {
          clearTimeout(ref.current);
          ref.current = null;
        }
      });
    };
  }, []);

  useEffect(() => {
    if (!newCoverPreview) return undefined;
    if (
      newCoverPreview.startsWith('blob:') &&
      typeof URL !== 'undefined' &&
      typeof URL.revokeObjectURL === 'function'
    ) {
      const preview = newCoverPreview;
      return () => {
        try { URL.revokeObjectURL(preview); } catch {}
      };
    }
    return undefined;
  }, [newCoverPreview]);

  const [showRings, setShowRings] = useState(true);
  const [testChannel, setTestChannel] = useState('draft');

  const [suite, setSuite]   = useState(null);
  const [config, setConfig] = useState(null);
  const [status, setStatus] = useState('');

  const [selected, setSelected] = useState(null);
  const [editing, setEditing]   = useState(null);
  // media inventory for editors
  const [inventory, setInventory] = useState([]);
  const fetchInventory = useCallback(async () => {
    try {
      const items = await listInventory(['uploads','bundles','icons','mediapool','covers']);
      return Array.isArray(items) ? items : [];
    } catch {
      return [];
    }
  }, []);
  const syncInventory = useCallback(async () => {
    const items = await fetchInventory();
    setInventory(items);
    return items;
  }, [fetchInventory]);
  useEffect(()=>{
    let mounted = true;
    (async ()=>{
      const items = await fetchInventory();
      if (mounted) setInventory(items);
    })();
    return ()=> { mounted = false; };
  },[fetchInventory]);

  useEffect(() => {
    let cancelled = false;

    async function loadMeta() {
      const nowIso = new Date().toISOString();
      try {
        const [metaRes, vercelRes] = await Promise.all([
          fetch('/api/admin-meta', { cache: 'no-store', credentials: 'include' }).catch(() => null),
          fetch('/api/vercel-status?project=game', { cache: 'no-store', credentials: 'include' }).catch(() => null),
        ]);

        const metaJson = metaRes ? await metaRes.json().catch(() => ({})) : {};
        const vercelJson = vercelRes ? await vercelRes.json().catch(() => ({})) : {};

        if (cancelled) return;

        const metaOk = metaJson?.ok !== false;
        const vercelOk = vercelJson?.ok !== false;

        const deploymentUrlRaw = vercelJson?.url || '';
        const deploymentUrl = typeof deploymentUrlRaw === 'string' && deploymentUrlRaw
          ? (deploymentUrlRaw.startsWith('http') ? deploymentUrlRaw : `https://${deploymentUrlRaw}`)
          : '';
        const deploymentState = vercelJson?.state || (vercelJson?.disabled ? 'DISABLED' : '');
        const combinedError = (!metaOk && metaJson?.error)
          || (!vercelOk && (vercelJson?.error || vercelJson?.reason))
          || '';

        setAdminMeta((prev) => {
          const base = { ...ADMIN_META_INITIAL_STATE, ...(prev || {}) };
          return {
            ...base,
            branch: metaOk && metaJson?.branch ? metaJson.branch : base.branch,
            commit: metaOk && metaJson?.commit ? metaJson.commit : base.commit,
            owner: metaOk && metaJson?.owner ? metaJson.owner : base.owner,
            repo: metaOk && metaJson?.repo ? metaJson.repo : base.repo,
            vercelUrl: metaOk && metaJson?.vercelUrl ? metaJson.vercelUrl : base.vercelUrl,
            deploymentUrl: deploymentUrl || base.deploymentUrl,
            deploymentState: deploymentState ? String(deploymentState).toUpperCase() : base.deploymentState,
            fetchedAt: nowIso,
            error: combinedError || '',
          };
        });
      } catch (err) {
        if (cancelled) return;
        setAdminMeta((prev) => {
          const base = { ...ADMIN_META_INITIAL_STATE, ...(prev || {}) };
          return {
            ...base,
            fetchedAt: new Date().toISOString(),
            error: 'Unable to load deployment status',
          };
        });
      }
    }

    loadMeta();
    const timer = setInterval(loadMeta, 60000);
    return () => {
      cancelled = true;
      clearInterval(timer);
    };
  }, []);

  const [uploadStatus, setUploadStatus] = useState('');
  const [protectionState, setProtectionState] = useState({ enabled: false, loading: true, saving: false, updatedAt: null, passwordSet: false });
  const [protectionError, setProtectionError] = useState('');

  useEffect(() => {
    let cancelled = false;
    (async () => {
      try {
        const res = await fetch('/api/admin-protection?mode=ui', { cache: 'no-store', credentials: 'include' });
        const data = await res.json().catch(() => ({}));
        if (cancelled) return;
        if (res.ok) {
          setProtectionState({
            enabled: !!data.protected,
            loading: false,
            saving: false,
            updatedAt: data.updatedAt || null,
            passwordSet: !!data.passwordSet,
          });
          setProtectionError('');
        } else {
          throw new Error(data?.error || 'Failed to load protection status');
        }
      } catch (err) {
        if (cancelled) return;
        setProtectionState(prev => ({ ...prev, loading: false }));
        setProtectionError('Unable to read protection status');
      }
    })();
    return () => { cancelled = true; };
  }, []);

  useEffect(() => {
    if (!config) {
      const fallbackAppearance = DEFAULT_SKIN_PRESET?.appearance || defaultAppearance();
      applyAdminUiThemeForDocument(DEFAULT_APPEARANCE_SKIN, fallbackAppearance, 'light');
      return;
    }
    const stored = config.appearanceSkin && ADMIN_SKIN_TO_UI.has(config.appearanceSkin)
      ? config.appearanceSkin
      : null;
    const detected = detectAppearanceSkin(config.appearance, config.appearanceSkin);
    const tone = normalizeTone(config.appearanceTone);
    applyAdminUiThemeForDocument(stored || detected, config.appearance, tone);
  }, [
    config?.appearanceSkin,
    config?.appearance?.fontFamily,
    config?.appearance?.fontSizePx,
    config?.appearance?.fontColor,
    config?.appearance?.textBgColor,
    config?.appearance?.textBgOpacity,
    config?.appearance?.screenBgColor,
    config?.appearance?.screenBgOpacity,
    config?.appearance?.screenBgImage,
    config?.appearance?.screenBgImageEnabled,
    config?.appearance?.textAlign,
    config?.appearance?.textVertical,
    config?.appearance?.panelDepth,
    config?.appearanceTone,
  ]);


  const [dirty, setDirty]       = useState(false);
  const [missionTriggerPicker, setMissionTriggerPicker] = useState('');
  const missionTriggerState = mergeTriggerState(editing?.trigger);
  function updateMissionTrigger(partial) {
    setEditing(cur => {
      if (!cur) return cur;
      return { ...cur, trigger: mergeTriggerState(cur.trigger, partial) };
    });
    setDirty(true);
  }

  const [coverPickerOpen, setCoverPickerOpen] = useState(false);
  const [coverPickerItems, setCoverPickerItems] = useState([]);
  const [coverPickerLoading, setCoverPickerLoading] = useState(false);
  const [coverDropActive, setCoverDropActive] = useState(false);
  const [coverUploadPreview, setCoverUploadPreview] = useState('');
  const [coverUploadTarget, setCoverUploadTarget] = useState('');
  const [missionResponsesError, setMissionResponsesError] = useState(null);
  const [assignedMediaError, setAssignedMediaError] = useState(null);

  // Keep missionResponsesFallback from codex branch
  const editingIsNew = useMemo(() => {
    if (!editing) return false;
    const missionList = Array.isArray(suite?.missions) ? suite.missions : [];
    return !missionList.some((mission) => mission?.id === editing.id);
  }, [editing, suite?.missions]);

  const missionResponsesFallback = useCallback(({ error, reset }) => (
    <div style={S.errorPanel}>
      <div style={S.errorPanelTitle}>Mission responses failed to load</div>
      <div style={S.errorPanelMessage}>
        {error?.message || 'An unexpected error occurred while rendering the mission response editor.'}
      </div>
      <div style={S.errorPanelActions}>
        <button
          type="button"
          style={S.button}
          onClick={() => {
            setMissionResponsesError(null);
            reset();
          }}
        >
          Retry
        </button>
      </div>
    </div>
  ), [setMissionResponsesError]);


  useEffect(() => {
    return () => {
      if (
        coverUploadPreview &&
        coverUploadPreview.startsWith('blob:') &&
        typeof URL !== 'undefined' &&
        typeof URL.revokeObjectURL === 'function'
      ) {
        try { URL.revokeObjectURL(coverUploadPreview); } catch {}
      }
    };
  }, [coverUploadPreview]);

  useEffect(() => {
    if (!coverUploadTarget) return;
    const safeNormalize = (value) => {
      try {
        return toDirectMediaURL(value || '');
      } catch {
        return String(value || '');
      }
    };
    const normalizedTarget = safeNormalize(coverUploadTarget);
    const normalizedCurrent = config?.game?.coverImage ? safeNormalize(config.game.coverImage) : '';
    if (normalizedTarget && normalizedCurrent && normalizedTarget === normalizedCurrent) {
      setCoverUploadTarget('');
      setCoverUploadPreview('');
    }
  }, [config?.game?.coverImage, coverUploadTarget]);
  const coverFileInputRef = useRef(null);
  const [gameTagsDraft, setGameTagsDraft] = useState('');

  // selections
  const [selectedDevIdx, setSelectedDevIdx] = useState(null);
  const [selectedMissionIdx, setSelectedMissionIdx] = useState(null);

  // Devices tab
  const [devSearchQ, setDevSearchQ] = useState('');
  const [devSearching, setDevSearching] = useState(false);
  const [devResults, setDevResults] = useState([]);
  const [isDeviceEditorOpen, setIsDeviceEditorOpen] = useState(false);
  const [deviceEditorMode, setDeviceEditorMode] = useState('new');
  const [devDraft, setDevDraft] = useState(() => createDeviceDraft());
  const [devDraftBaseline, setDevDraftBaseline] = useState(() => createDeviceDraft());
  const [deviceTriggerPicker, setDeviceTriggerPicker] = useState('');

  // Combined Save & Publish
  const [deployDelaySec, setDeployDelaySec] = useState(5);
  const [savePubBusy, setSavePubBusy] = useState(false);

  // Pin size (selected)
  const [selectedPinSize, setSelectedPinSize] = useState(28);
  const defaultPinSize = 24;


  // Settings → Region search
  const [mapSearchQ, setMapSearchQ] = useState('');
  const [mapSearching, setMapSearching] = useState(false);
  const [mapResults, setMapResults] = useState([]);

  // Test preview nonce (force iframe reload)
  const [previewNonce, setPreviewNonce] = useState(0);

  // Delete confirm modal
  const [confirmDeleteOpen, setConfirmDeleteOpen] = useState(false);

  const slugForMeta = (!activeSlug || activeSlug === 'default') ? 'default' : activeSlug;

  useEffect(() => {
    const tags = Array.isArray(config?.game?.tags) ? config.game.tags : [];
    setGameTagsDraft(tags.join(', '));
  }, [config?.game?.tags]);

  useEffect(() => {
    try {
      const savedDelay = localStorage.getItem('deployDelaySec');
      if (savedDelay != null) setDeployDelaySec(Math.max(0, Math.min(120, Number(savedDelay) || 0)));
      const savedSel = localStorage.getItem('selectedPinSize');
      if (savedSel != null) setSelectedPinSize(clamp(Number(savedSel) || 28, 12, 64));
    } catch {}
  }, []);
  useEffect(() => { try { localStorage.setItem('deployDelaySec', String(deployDelaySec)); } catch {} }, [deployDelaySec]);
  useEffect(() => { try { localStorage.setItem('selectedPinSize', String(selectedPinSize)); } catch {} }, [selectedPinSize]);

  const gameBase =
    ((typeof window !== 'undefined'
      ? (window.__GAME_ORIGIN__ || process.env.NEXT_PUBLIC_GAME_ORIGIN)
      : process.env.NEXT_PUBLIC_GAME_ORIGIN) || (config?.gameOrigin) || '');

  const getDevices = () => (config?.devices?.length ? config.devices : (config?.powerups || []));
  const setDevices = (list) => setConfig(prev => ({ ...(prev || {}), devices: list, powerups: list }));

  /* load games */
  // Keep Main version with better error handling
  useEffect(() => {
    if (!gameEnabled) { setGames([]); return; } // Added check from codex branch
    let cancelled = false;
    (async () => {
      try {
        const r = await fetch('/api/games', { credentials:'include', cache:'no-store' });
        if (!r.ok) {
          const text = await r.text();
          throw new Error(text || `HTTP ${r.status}`);
        }
        const j = await r.json();
        if (cancelled) return;
        if (j.ok) {
          setGames(Array.isArray(j.games) ? j.games : []);
        } else if (j?.error) {
          setStatus(prev => prev || `⚠️ ${j.error}`);
        }
      } catch (err) {
        if (cancelled) return;
        setGames([]);
        setStatus(prev => prev || `⚠️ Unable to load games list (${err?.message || 'network error'})`);
      }
    })();
    return () => { cancelled = true; };
  }, [gameEnabled]);


  /* load suite/config when slug changes */
  useEffect(() => {
    (async () => {
      try {
        setStatus('Loading…');
        const isDefault = !activeSlug || activeSlug === 'default';

        const missionUrls = isDefault
          ? ['/missions.json']
          : [`/games/${encodeURIComponent(activeSlug)}/missions.json`, `/missions.json`];

        const configUrls = isDefault
          ? ['/api/config']
          : [`/api/config${qs({ slug: activeSlug })}`, '/api/config'];

        const m  = await fetchFirstJson(missionUrls, { version:'0.0.0', missions:[] });
        const c0 = await fetchFirstJson(configUrls, defaultConfig());

        const dc = defaultConfig();
        const normalized = {
          ...m,
          missions: (m.missions || []).map(x => ({
            ...x,
            appearanceOverrideEnabled: !!x.appearanceOverrideEnabled,
            appearance: { ...defaultAppearance(), ...(x.appearance || {}) },
            correct: x.correct || { mode:'none' },
            wrong:   x.wrong   || { mode:'none' },
            showContinue: x.showContinue !== false,
          })),
        };

        let merged = {
          ...dc, ...c0,
          game: { ...dc.game, ...(c0.game || {}) },
          splash: { ...dc.splash, ...(c0.splash || {}) },
          timer: { ...dc.timer, ...(c0.timer || {}) },
          devices: (c0.devices && Array.isArray(c0.devices)) ? c0.devices
                   : (c0.powerups && Array.isArray(c0.powerups)) ? c0.powerups : [],
          media: { rewardsPool:[], penaltiesPool:[], ...(c0.media || {}) },
          icons: { ...DEFAULT_ICONS, ...(c0.icons || {}) },
          appearance: {
            ...defaultAppearance(),
            ...dc.appearance,
            ...(c0.appearance || {}),
          },
          map: { ...dc.map, ...(c0.map || {}) },
          geofence: { ...dc.geofence, ...(c0.geofence || {}) },
          mediaTriggers: { ...DEFAULT_TRIGGER_CONFIG, ...(c0.mediaTriggers || {}) },
        };

        const storedSkin = c0.appearanceSkin && ADMIN_SKIN_TO_UI.has(c0.appearanceSkin)
          ? c0.appearanceSkin
          : null;
        merged.appearanceSkin = storedSkin || detectAppearanceSkin(merged.appearance, c0.appearanceSkin);

        merged = applyDefaultIcons(merged);
        // Merge: Add splash mode normalization from codex branch
        const splash = merged.splash || {};
        const normalizedSplashMode = typeof splash.mode === 'string'
          ? splash.mode.toLowerCase()
          : '';
        merged.splash = {
          ...splash,
          enabled: splash.enabled !== false,
          mode: normalizedSplashMode === 'live' ? 'live' : 'test', // 'test' or 'live'
        };
        merged = normalizeGameMetadata(merged, slugForMeta);

        setSuite(normalized);
        setConfig(merged);
        setSelected(null); setEditing(null); setDirty(false);
        setSelectedDevIdx(null); setSelectedMissionIdx(null);
        setStatus('');
      } catch (e) {
        setStatus('Load failed: ' + (e?.message || e));
      }
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [activeSlug]);

  function defaultConfig() {
    return {
      // Merge: Use 'test' splash mode and playerCount from codex
      splash: { enabled:true, mode:'test' },
      game:   { title:'Default Game', type:'Mystery', tags:['default','default-game'], coverImage:'', playerCount:1 },
      forms:  { players:1 },
      timer:  { durationMinutes:0, alertMinutes:10 },
      textRules: [],
      devices: [], powerups: [],
      media: { rewardsPool:[], penaltiesPool:[] },
      icons: DEFAULT_ICONS,
      appearanceSkin: DEFAULT_APPEARANCE_SKIN,
      appearance: {
        ...defaultAppearance(),
        ...(DEFAULT_SKIN_PRESET?.appearance || {}),
      },
      appearanceTone: 'light',
      mediaTriggers: { ...DEFAULT_TRIGGER_CONFIG },
      map: { centerLat: 44.9778, centerLng: -93.2650, defaultZoom: 13 },
      geofence: { mode: 'test' },
    };
  }

  function defaultContentForType(t) {
    const base = { geofenceEnabled:false, lat:'', lng:'', radiusMeters:25, cooldownSeconds:30 };
    switch (t) {
      case 'multiple_choice': return { question:'', choices:[], correctIndex:undefined, mediaUrl:'', ...base };
      case 'short_answer':    return { question:'', answer:'', acceptable:'', mediaUrl:'', ...base };
      case 'statement':       return { text:'', mediaUrl:'', ...base };
      case 'video':           return { videoUrl:'', overlayText:'', ...base };
      case 'geofence_image':  return { lat:'', lng:'', radiusMeters:25, cooldownSeconds:30, imageUrl:'', overlayText:'' };
      case 'geofence_video':  return { lat:'', lng:'', radiusMeters:25, cooldownSeconds:30, videoUrl:'', overlayText:'' };
      case 'ar_image':        return { markerUrl:'', assetUrl:'', overlayText:'', ...base };
      case 'ar_video':        return { markerUrl:'', assetUrl:'', overlayText:'', ...base };
      case 'stored_statement':return { template:'' };
      default:                return { ...base };
    }
  }

  /* ── API helpers respecting Default Game (legacy root) ── */
  function isDefaultSlug(slug) { return !slug || slug === 'default'; }

  async function saveAllWithSlug(slug) {
    if (!suite || !config) return false;
    setStatus((prev) => {
      if (typeof prev === 'string' && prev.toLowerCase().includes('publishing')) return prev;
      return 'Saving…';
    });
    const url = isDefaultSlug(slug)
      ? `/api/save-bundle`
      : `/api/save-bundle${qs({ slug })}`;
    const slugTag = isDefaultSlug(slug) ? 'default' : slug;
    const preparedConfig = normalizeGameMetadata(config, slugTag);
    if (preparedConfig !== config) setConfig(preparedConfig);
    try {
      const r = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ missions: suite, config: preparedConfig })
      });
      const text = await r.text();
      if (!r.ok) throw new Error(text || 'save failed');
      setStatus('✅ Saved');
      return true;
    } catch (e) {
      setStatus('❌ Save failed: ' + (e?.message || e));
      return false;
    }
  }

  async function publishWithSlug(slug, channel='published') {
    if (isDefaultSlug(slug)) {
      try {
        const res = await fetch('/api/publish', {
          method:'POST',
          headers:{ 'Content-Type':'application/json' },
          credentials:'include',
          body: JSON.stringify({ slug: 'root' }), // 'root' might be legacy, adapt if needed
        });
        const txt = await res.text();
        let data = {};
        try { data = JSON.parse(txt); } catch {}
        if (!res.ok || data?.ok === false) {
          const err = data?.error || txt || 'publish failed';
          throw new Error(err);
        }
        setStatus('✅ Published');
        return true;
      } catch (e) {
        setStatus('❌ Publish failed: ' + (e?.message || e));
        return false;
      }
    }

    // Prefer new endpoint structure from Main
    const first = `/api/game${qs({ slug, channel })}`;
    const fallback = `/api/game/${encodeURIComponent(slug)}${qs({ channel })}`;

    try {
      const res = await fetch(first, {
        method:'POST', headers:{'Content-Type':'application/json'}, credentials:'include',
        body: JSON.stringify({ action:'publish' })
      });
      const txt = await res.text();
      let data = {};
      try { data = JSON.parse(txt); } catch {}
      if (!res.ok) throw new Error('try fallback'); // Fallback logic kept
      setStatus(`✅ Published${data?.version ? ` v${data.version}` : ''}`);
      return true;
    } catch (e) {
      // Fallback logic
      try {
        const res2 = await fetch(fallback, {
          method:'POST', headers:{'Content-Type':'application/json'}, credentials:'include',
          body: JSON.stringify({ action:'publish' })
        });
        const txt2 = await res2.text();
        let data2 = {};
        try { data2 = JSON.parse(txt2); } catch {}
        if (!res2.ok) throw new Error(txt2||'publish failed');
        setStatus(`✅ Published${data2?.version ? ` v${data2.version}` : ''}`);
        return true;
      } catch (e2) {
        setStatus('❌ Publish failed: ' + (e2?.message || e2));
        return false;
      }
    }
  }

  // Keep Main version with better error handling
  async function reloadGamesList() {
    if (!gameEnabled) { setGames([]); return; } // Added check from codex branch
    try {
      const r = await fetch('/api/games', { credentials:'include', cache:'no-store' });
      if (!r.ok) {
        const txt = await r.text();
        throw new Error(txt || `HTTP ${r.status}`);
      }
      const j = await r.json();
      if (j.ok) {
        setGames(Array.isArray(j.games) ? j.games : []);
      } else if (j?.error) {
        setStatus(`⚠️ ${j.error}`);
      }
    } catch (err) {
      setStatus(`⚠️ Unable to refresh games list (${err?.message || 'network error'})`);
    }
  }


  async function saveAndPublish() {
    if (!suite || !config) return;
    const slug = activeSlug || 'default';
    const shouldPublish = gameEnabled && config?.game?.deployEnabled === true;
    setSavePubBusy(true);
    setStatus(shouldPublish ? 'Saving & publishing…' : 'Saving…');

    const saved = await saveAllWithSlug(slug);
    if (!saved) { setSavePubBusy(false); return; }

    if (shouldPublish && deployDelaySec > 0) await new Promise(r => setTimeout(r, deployDelaySec * 1000));

    if (shouldPublish) {
      const published = await publishWithSlug(slug, 'published');
      if (!published) { setSavePubBusy(false); return; }
    } else {
      setStatus('✅ Saved (game deploy disabled)');
    }

    await reloadGamesList();
    setPreviewNonce(n => n + 1);
    setSavePubBusy(false);
  }

  /* Delete game (with modal confirm) */
  async function reallyDeleteGame() {
    // Merge: Keep gameEnabled check from codex branch
    if (!gameEnabled) { setConfirmDeleteOpen(false); return; }
    const slug = activeSlug || 'default';
    const urlTry = [
      `/api/games${qs({ slug: isDefaultSlug(slug) ? '' : slug })}`,
      !isDefaultSlug(slug) ? `/api/game${qs({ slug })}` : null,
      !isDefaultSlug(slug) ? `/api/games/${encodeURIComponent(slug)}` : null,
      !isDefaultSlug(slug) ? `/api/game/${encodeURIComponent(slug)}` : null,
    ].filter(Boolean);

    setStatus('Deleting game…');
    let ok = false, lastErr = '';
    for (const u of urlTry) {
      try {
        const res = await fetch(u, { method:'DELETE', credentials:'include' });
        if (res.ok) { ok = true; break; }
        lastErr = await res.text();
      } catch (e) { lastErr = e?.message || String(e); }
    }

    // Fallback clear logic kept
    if (!ok && isDefaultSlug(slug)) { // Only clear content for default, don't rely on it for named slugs
      setSuite({ version:'0.0.0', missions:[] });
      setConfig(c => ({
        ...(c || {}),
        devices: [],
        powerups: [],
        media: { rewardsPool:[], penaltiesPool:[] },
        textRules: [],
      }));
      setDirty(true);
      const saved = await saveAllWithSlug(slug);
      if (saved) { setStatus('✅ Cleared game content'); ok = true; }
    }

    if (ok) {
      await reloadGamesList();
      setActiveSlug('default'); // Always return to default after delete
      setStatus('✅ Game deleted');
      setPreviewNonce(n => n + 1);
    } else {
      setStatus('❌ Delete failed: ' + (lastErr || 'unknown error'));
    }
    setConfirmDeleteOpen(false);
  }


  /* Missions CRUD */
  function suggestId() {
    const base='m'; let i=1;
    const ids = new Set((suite?.missions||[]).map(m=>m.id));
    while (ids.has(String(base + String(i).padStart(2,'0')))) i++;
    return base + String(i).padStart(2,'0');
  }
  function startNew() {
    if (missionButtonTimeout.current) {
      clearTimeout(missionButtonTimeout.current);
      missionButtonTimeout.current = null;
    }
    setNewMissionButtonFlash(true);
    missionButtonTimeout.current = setTimeout(() => {
      setNewMissionButtonFlash(false);
      missionButtonTimeout.current = null;
    }, 420);
    const draft = {
      id: suggestId(),
      // Merge: Use neutral title
      title: 'New Mission',
      type: 'multiple_choice',
      iconKey: '',
      rewards: { points: 25 },
      correct: { mode: 'none' },
      wrong:   { mode: 'none' },
      onCorrect: { statement:'', mediaUrl:'', audioUrl:'', durationSeconds:0, buttonText:'OK', enabled:false },
      onWrong:   { statement:'', mediaUrl:'', audioUrl:'', durationSeconds:0, buttonText:'OK', enabled:false },
      content: defaultContentForType('multiple_choice'),
      appearanceOverrideEnabled: false,
      appearance: defaultAppearance(),
      showContinue: true,
      trigger: { ...DEFAULT_TRIGGER_CONFIG },
    };
    setEditing(draft); setSelected(null); setDirty(true);
  }

  function editExisting(m) {
    if (!m) return;
    let e;
    try {
      e = JSON.parse(JSON.stringify(m));
    } catch (err) {
      console.warn('Falling back to shallow mission copy', err);
      e = { ...(m || {}) };
    }
    e.appearanceOverrideEnabled = !!e.appearanceOverrideEnabled;
    e.appearance = { ...defaultAppearance(), ...(e.appearance || {}) };
    if (!e.correct) e.correct = { mode: 'none' };
    if (!e.wrong)   e.wrong   = { mode: 'none' };
    if (!e.onCorrect) e.onCorrect = { statement:'', mediaUrl:'', audioUrl:'', durationSeconds:0, buttonText:'OK', enabled:false };
    if (!e.onWrong)   e.onWrong   = { statement:'', mediaUrl:'', audioUrl:'', durationSeconds:0, buttonText:'OK', enabled:false };
    if (e.showContinue === undefined) e.showContinue = true;
    e.trigger = { ...DEFAULT_TRIGGER_CONFIG, ...(e.trigger || {}) };
    setEditing(e); setSelected(m.id); setDirty(false);
  }
  function cancelEdit() {
    setEditing(null); setSelected(null); setDirty(false);
    setMissionActionFlash(false);
    if (missionFlashTimeout.current) {
      clearTimeout(missionFlashTimeout.current);
      missionFlashTimeout.current = null;
    }
  }
  function bumpVersion(v) {
    const p = String(v || '0.0.0')
      .split('.')
      .map((n) => parseInt(n || '0', 10));
    while (p.length < 3) p.push(0);
    p[2] += 1;
    return p.join('.');
  }
  function saveToList() {
    if (!editing || !suite) return;
    if (!editing.id || !editing.title || !editing.type) return setStatus('❌ Fill id, title, type');

    const fields = TYPE_FIELDS[editing.type] || [];
    for (const f of fields) {
      if (f.type === 'number' || f.optional) continue;
      if (f.key === 'acceptable' || f.key === 'mediaUrl') continue;
      const v = editing.content?.[f.key];
      if (v === undefined || v === null || v === '') {
        return setStatus('❌ Missing: ' + f.label);
      }
    }
    const missions = [...(suite.missions || [])];
    const i = missions.findIndex(m => m.id === editing.id);
    const obj = { ...editing };
    obj.trigger = sanitizeTriggerConfig(editing.trigger);
    if (!obj.appearanceOverrideEnabled) delete obj.appearance;

    const list = (i >= 0 ? (missions[i]=obj, missions) : [...missions, obj]);
    setSuite({ ...suite, missions: list, version: bumpVersion(suite.version || '0.0.0') });
    setSelected(editing.id); setEditing(null); setDirty(false);
    setStatus('✅ Mission saved');
  }
  function handleMissionSave() {
    if (missionFlashTimeout.current) {
      clearTimeout(missionFlashTimeout.current);
      missionFlashTimeout.current = null;
    }
    setMissionActionFlash(true);
    missionFlashTimeout.current = setTimeout(() => {
      setMissionActionFlash(false);
      missionFlashTimeout.current = null;
    }, 420);
    saveToList();
  }
  function removeMission(id) {
    if (!suite) return;
    setSuite({ ...suite, missions: (suite.missions || []).filter(m => m.id !== id) });
    setDirty(true);
    if (selected === id) { setSelected(null); setEditing(null); }
  }
  function moveMission(idx, dir) {
    if (!suite) return;
    const list = [...(suite.missions || [])];
    const j = idx + dir; if (j < 0 || j >= list.length) return;
    const [row] = list.splice(idx, 1); list.splice(j, 0, row);
    setSuite({ ...suite, missions: list });
    setDirty(true);
  }
  function duplicateMission(idx) {
    const list = [...(suite.missions || [])];
    const src  = list[idx]; if (!src) return;
    const cp   = JSON.parse(JSON.stringify(src));
    cp.id     = suggestId();
    cp.title   = (src.title || 'Copy') + ' (copy)';
    list.splice(idx + 1, 0, cp);
    setSuite({ ...suite, missions: list });
    setDirty(true);
    setStatus('✅ Duplicated');
  }

  /* Devices (Devices tab only) */
  const devices = getDevices();
  function deviceIconUrlFromKey(key) {
    if (!key) return '';
    const it = (config?.icons?.devices || []).find(x => (x.key||'') === key);
    return it?.url || '';
  }
  function missionIconUrlFromKey(key) {
    if (!key) return '';
    const it = (config?.icons?.missions || []).find(x => (x.key||'') === key);
    return it?.url || '';
  }
  const triggerOptionSets = useMemo(() => {
    const mediaOptions = (inventory || []).map((it, idx) => {
      const rawUrl = it?.url || it?.path || it;
      const url = toDirectMediaURL(rawUrl);
      if (!url) return null;
      const label = it?.label || baseNameFromUrl(url) || `Media ${idx + 1}`;
      return { id: url, label, thumbnail: url, meta: it };
    }).filter(Boolean);
    const deviceOptions = (devices || []).map((d, idx) => {
      const id = d?.id || d?.key || `device-${idx}`;
      const label = d?.title || d?.name || id;
      const thumbnail = toDirectMediaURL(d?.iconUrl || deviceIconUrlFromKey(d?.iconKey) || '');
      return { id, label, thumbnail, meta: d };
    });
    const missionOptions = ((suite?.missions) || []).map((m, idx) => {
      const id = m?.id || `mission-${idx}`;
      const label = m?.title || id;
      const thumbnail = toDirectMediaURL(missionIconUrlFromKey(m?.iconKey) || '');
      return { id, label, thumbnail, meta: m };
    });
    const responseOptions = [];
    ((suite?.missions) || []).forEach((m) => {
      if (!m) return;
      const baseLabel = m.title || m.id || 'Mission';
      const correctUrl = toDirectMediaURL(m?.correct?.mediaUrl || m?.correct?.audioUrl || missionIconUrlFromKey(m?.iconKey) || '');
      responseOptions.push({
        id: `${m.id || baseLabel}::correct`,
        label: `${baseLabel} — Correct`,
        thumbnail: correctUrl,
        meta: { mission: m, side: 'correct', url: correctUrl },
      });
      const wrongUrl = toDirectMediaURL(m?.wrong?.mediaUrl || m?.wrong?.audioUrl || missionIconUrlFromKey(m?.iconKey) || '');
      responseOptions.push({
        id: `${m.id || baseLabel}::wrong`,
        label: `${baseLabel} — Wrong`,
        thumbnail: wrongUrl,
        meta: { mission: m, side: 'wrong', url: wrongUrl },
      });
    });
    return { media: mediaOptions, devices: deviceOptions, missions: missionOptions, responses: responseOptions };
  }, [inventory, devices, suite?.missions, config?.icons?.devices, config?.icons?.missions]);

  function suggestDeviceId(existing = devices) {
    const ids = new Set((existing || []).map(d => String(d?.id || '').toLowerCase()));
    let i = 1;
    while (ids.has(`d${String(i).padStart(2, '0')}`)) i += 1;
    return `d${String(i).padStart(2, '0')}`;
  }
  function addDevice() {
    if (deviceButtonTimeout.current) {
      clearTimeout(deviceButtonTimeout.current);
      deviceButtonTimeout.current = null;
    }
    setAddDeviceButtonFlash(true);
    deviceButtonTimeout.current = setTimeout(() => {
      setAddDeviceButtonFlash(false);
      deviceButtonTimeout.current = null;
    }, 420);
    setDeviceEditorMode('new');
    setIsDeviceEditorOpen(true);
    setSelectedDevIdx(null);
    setSelectedMissionIdx(null);
    const baseLat = Number(config.map?.centerLat ?? 44.9778);
    const baseLng = Number(config.map?.centerLng ?? -93.2650);
    const initial = createDeviceDraft({
      lat: Number((isFinite(baseLat) ? baseLat : 44.9778).toFixed(6)),
      lng: Number((isFinite(baseLng) ? baseLng : -93.2650).toFixed(6)),
    });
    setDevDraft(initial);
    setDevDraftBaseline(createDeviceDraft({ ...initial }));
  }
  function openDeviceEditor(idx) {
    if (idx == null) return;
    const item = devices?.[idx];
    if (!item) return;
    setDeviceEditorMode('edit');
    setIsDeviceEditorOpen(true);
    setSelectedDevIdx(idx);
    setSelectedMissionIdx(null);
    const draft = createDeviceDraft({ ...item });
    setDevDraft(draft);
    setDevDraftBaseline(createDeviceDraft({ ...item }));
  }
  function closeDeviceEditor() {
    setIsDeviceEditorOpen(false);
    setDeviceEditorMode('new');
    setDevDraft(createDeviceDraft());
    setDevDraftBaseline(createDeviceDraft());
  }
  function resetDeviceEditor() {
    const baseline = createDeviceDraft({ ...devDraftBaseline });
    const unchanged = JSON.stringify(baseline) === JSON.stringify(devDraft);
    setDevDraft(baseline);
    setDeviceTriggerPicker('');
    setStatus(unchanged ? 'ℹ️ Device draft unchanged' : '↩️ Device changes reset');
  }
  function cancelDeviceEditor() {
    setDeviceTriggerPicker('');
    closeDeviceEditor();
    setStatus('🚫 Device edit cancelled');
    setDeviceActionFlash(false);
    if (deviceFlashTimeout.current) {
      clearTimeout(deviceFlashTimeout.current);
      deviceFlashTimeout.current = null;
    }
  }
  function saveDraftDevice() {
    const normalized = {
      title: devDraft.title?.trim() || (devDraft.type.charAt(0).toUpperCase() + devDraft.type.slice(1)),
      type: devDraft.type || 'smoke',
      iconKey: devDraft.iconKey || '',
      pickupRadius: clamp(Number(devDraft.pickupRadius || 0), 1, 2000),
      effectSeconds: clamp(Number(devDraft.effectSeconds || 0), 5, 3600),
      trigger: sanitizeTriggerConfig(devDraft.trigger),
    };
    if (deviceEditorMode === 'new') {
      if (devDraft.lat == null || devDraft.lng == null) {
        setStatus('❌ Click the map or search an address to set device location');
        return;
      }
      const lat = Number(Number(devDraft.lat).toFixed(6));
      const lng = Number(Number(devDraft.lng).toFixed(6));
      const list = [...(devices || [])];
      const item = { id: suggestDeviceId(list), ...normalized, lat, lng };
      const next = [...list, item];
      setDevices(next);
      setSelectedDevIdx(next.length - 1);
      setSelectedMissionIdx(null);
      setDirty(true);
      setStatus('✅ Device added');
      closeDeviceEditor();
      return;
    }
    if (deviceEditorMode === 'edit' && selectedDevIdx != null) {
      const index = selectedDevIdx;
      const list = [...(devices || [])];
      const existing = list[index];
      if (!existing) return;
      const lat = devDraft.lat == null ? existing.lat : Number(Number(devDraft.lat).toFixed(6));
      const lng = devDraft.lng == null ? existing.lng : Number(Number(devDraft.lng).toFixed(6));
      list[index] = { ...existing, ...normalized, lat, lng };
      setDevices(list);
      setDirty(true);
      setStatus('✅ Device updated');
      closeDeviceEditor();
    }
  }
  function handleDeviceSave() {
    if (deviceFlashTimeout.current) {
      clearTimeout(deviceFlashTimeout.current);
      deviceFlashTimeout.current = null;
    }
    setDeviceActionFlash(true);
    deviceFlashTimeout.current = setTimeout(() => {
      setDeviceActionFlash(false);
      deviceFlashTimeout.current = null;
    }, 420);
    saveDraftDevice();
  }
  function duplicateDevice(idx) {
    const list = [...(devices || [])];
    const src = list[idx];
    if (!src) return;
    const copy = JSON.parse(JSON.stringify(src));
    copy.id = suggestDeviceId(list);
    copy.title = (src.title || src.id || 'Device') + ' (copy)';
    list.splice(idx + 1, 0, copy);
    setDevices(list);
    setDirty(true);
    const newIndex = idx + 1;
    setSelectedDevIdx(newIndex);
    setSelectedMissionIdx(null);
    setStatus('✅ Device duplicated');
    setDeviceEditorMode('edit');
    setIsDeviceEditorOpen(true);
    setDevDraft(createDeviceDraft({ ...copy }));
  }
  function deleteDevice(idx) {
    const list = [...(devices || [])];
    if (idx == null || idx < 0 || idx >= list.length) return;
    const currentSelected = selectedDevIdx;
    list.splice(idx, 1);
    setDevices(list);
    setDirty(true);
    if (currentSelected === idx) {
      setSelectedDevIdx(null);
      if (isDeviceEditorOpen && deviceEditorMode === 'edit') closeDeviceEditor();
    } else if (currentSelected != null && currentSelected > idx) {
      setSelectedDevIdx(currentSelected - 1);
    }
    setStatus('✅ Device deleted');
  }
  function moveDevice(idx, dir) {
    const list = [...(devices || [])];
    if (idx == null || idx < 0 || idx >= list.length) return;
    const target = idx + dir;
    if (target < 0 || target >= list.length) return;
    const [row] = list.splice(idx, 1);
    list.splice(target, 0, row);
    setDevices(list);
    setDirty(true);
    const currentSelected = selectedDevIdx;
    if (currentSelected === idx) {
      setSelectedDevIdx(target);
      if (isDeviceEditorOpen && deviceEditorMode === 'edit') {
        setDevDraft(createDeviceDraft({ ...list[target] }));
      }
    } else if (currentSelected === target) {
      setSelectedDevIdx(idx);
    }
  }
  function moveSelectedDevice(lat, lng) {
    if (selectedDevIdx == null) return;
    const list = [...(devices || [])];
    const existing = list[selectedDevIdx];
    if (!existing) return;
    const latFixed = Number(lat.toFixed(6));
    const lngFixed = Number(lng.toFixed(6));
    list[selectedDevIdx] = { ...existing, lat: latFixed, lng: lngFixed };
    setDevices(list);
    setDirty(true);
    if (isDeviceEditorOpen && deviceEditorMode === 'edit') {
      setDevDraft(d => ({ ...d, lat: latFixed, lng: lngFixed }));
    }
  }
  function setSelectedDeviceRadius(r) {
    if (selectedDevIdx == null) return;
    const list = [...(devices || [])];
    const existing = list[selectedDevIdx];
    if (!existing) return;
    const nextRadius = clamp(Number(r || 0), 1, 2000);
    list[selectedDevIdx] = { ...existing, pickupRadius: nextRadius };
    setDevices(list);
    setDirty(true);
    if (isDeviceEditorOpen && deviceEditorMode === 'edit') {
      setDevDraft(d => ({ ...d, pickupRadius: nextRadius }));
    }
  }

  function applyAppearanceSkin(key) {
    const preset = APPEARANCE_SKIN_MAP.get(key);
    if (!preset) return;
    const tone = normalizeTone(config?.appearanceTone);
    applyAdminUiThemeForDocument(key, preset.appearance, tone);
    setConfig(prev => ({
      ...(prev || {}),
      appearance: { ...defaultAppearance(), ...preset.appearance },
      appearanceSkin: key,
    }));
    setDirty(true);
    setStatus(`✅ Applied theme: ${preset.label}`);
  }

  function updateInterfaceTone(nextTone) {
    const normalized = normalizeTone(nextTone);
    if (normalized === normalizeTone(config?.appearanceTone)) return;
    const appearance = config?.appearance || defaultAppearance();
    const skinKey = config?.appearanceSkin && ADMIN_SKIN_TO_UI.has(config.appearanceSkin)
      ? config.appearanceSkin
      : detectAppearanceSkin(appearance, config?.appearanceSkin);
    applyAdminUiThemeForDocument(skinKey, appearance, normalized);
    setConfig(prev => ({ ...(prev || {}), appearanceTone: normalized }));
    setDirty(true);
    setStatus(normalized === 'dark' ? '🌙 Dark mission deck enabled' : '☀️ Light command deck enabled');
  }

  function openProtectionPrompt() {
    const target = !protectionState.enabled;
    setProtectionError('');
    setProtectionPrompt({
      open: true,
      mode: target ? 'enable' : 'disable',
      requireConfirm: target && !protectionState.passwordSet,
      password: '',
      confirm: '',
      error: '',
    });
  }

  function closeProtectionPrompt() {
    setProtectionPrompt(prev => ({ ...prev, open: false, password: '', confirm: '', error: '' }));
    setProtectionState(prev => ({ ...prev, saving: false }));
  }

  async function submitProtectionPrompt() {
    const { mode, password, confirm, requireConfirm } = protectionPrompt;
    if (!password.trim()) {
      setProtectionPrompt(prev => ({ ...prev, error: 'Password required' }));
      return;
    }
    if (requireConfirm && password !== confirm) {
      setProtectionPrompt(prev => ({ ...prev, error: 'Passwords must match to enable protection' }));
      return;
    }
    setProtectionError('');
    setProtectionState(prev => ({ ...prev, saving: true }));
    setProtectionPrompt(prev => ({ ...prev, error: '' }));
    try {
      const res = await fetch('/api/admin-protection', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          protected: mode === 'enable',
          password,
          ...(requireConfirm ? { confirmPassword: confirm } : {}),
        }),
      });
      const data = await res.json().catch(() => ({}));
      if (!res.ok) {
        throw new Error(data?.error || res.statusText || 'Toggle failed');
      }
      setProtectionState({
        enabled: !!data.protected,
        loading: false,
        saving: false,
        updatedAt: data.updatedAt || null,
        passwordSet: data.passwordSet !== false,
      });
      setStatus(`✅ Admin password protection ${data.protected ? 'enabled' : 'disabled'}`);
      setProtectionPrompt({ open: false, mode: 'enable', requireConfirm: false, password: '', confirm: '', error: '' });
    } catch (err) {
      setProtectionState(prev => ({ ...prev, saving: false }));
      const msg = err?.message || 'Toggle failed';
      setProtectionPrompt(prev => ({ ...prev, error: msg }));
      setStatus('❌ Failed to toggle admin protection');
    }
  }

  // Missions selection operations (Missions tab only)
  function moveSelectedMission(lat, lng) {
    if (selectedMissionIdx == null) return;
    const list = [...(suite?.missions || [])];
    const m = list[selectedMissionIdx]; if (!m) return;
    const c = { ...(m.content || {}) };
    c.lat = Number(lat.toFixed(6));
    c.lng = Number(lng.toFixed(6));
    c.geofenceEnabled = true;
    c.radiusMeters = clamp(Number(c.radiusMeters || 25), 5, 500);
    list[selectedMissionIdx] = { ...m, content: c };
    setSuite({ ...suite, missions: list });
    setDirty(true);
    setStatus(`Moved mission #${selectedMissionIdx+1}`);
  }
  function setSelectedMissionRadius(r) {
    if (selectedMissionIdx == null) return;
    const list = [...(suite?.missions || [])];
    const m = list[selectedMissionIdx]; if (!m) return;
    const c = { ...(m.content || {}) };
    c.radiusMeters = clamp(Number(r || 0), 5, 500);
    c.geofenceEnabled = true;
    if (!isFinite(Number(c.lat)) || !isFinite(Number(c.lng))) {
      c.lat = Number(config.map?.centerLat || 44.9778);
      c.lng = Number(config.map?.centerLng || -93.2650);
    }
    list[selectedMissionIdx] = { ...m, content: c };
    setSuite({ ...suite, missions: list });
    setDirty(true);
  }

  // Address search (Devices tab)
  async function devSearch(e) {
    e?.preventDefault();
    const q = devSearchQ.trim();
    if (!q) return;
    setDevSearching(true);
    setDevResults([]);
    try {
      const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(q)}&limit=8&addressdetails=1`;
      const r = await fetch(url, { headers: { Accept: 'application/json' } });
      const j = await r.json();
      setDevResults(Array.isArray(j) ? j : []);
    } catch {
      setDevResults([]);
    } finally {
      setDevSearching(false);
    }
  }
  function applySearchResult(r) {
    const lat = Number(r.lat), lon = Number(r.lon);
    if (isDeviceEditorOpen && deviceEditorMode === 'new') {
      setDevDraft(d => ({ ...d, lat, lng: lon }));
    } else if (selectedDevIdx != null) {
      moveSelectedDevice(lat, lon);
    }
    setDevResults([]);
  }
  function useMyLocation() {
    if (!navigator.geolocation) return;
    navigator.geolocation.getCurrentPosition(pos => {
      applySearchResult({ lat: pos.coords.latitude, lon: pos.coords.longitude });
    });
  }

  // Settings → Map center search
  async function searchMapCenter(e) {
    e?.preventDefault?.();
    const q = mapSearchQ.trim();
    if (!q) return;
    setMapSearching(true);
    setMapResults([]);
    try {
      const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(q)}&limit=8&addressdetails=1`;
      const r = await fetch(url);
      const j = await r.json();
      setMapResults(Array.isArray(j) ? j : []);
    } catch { setMapResults([]); }
    finally { setMapSearching(false); }
  }
  function useCenterResult(r) {
    const lat = Number(r.lat), lng = Number(r.lon);
    setConfig(c => ({ ...(c || {}), map: { ...((c && c.map) || {}), centerLat: Number(lat.toFixed(6)), centerLng: Number(lng.toFixed(6)) } }));
    setMapResults([]);
  }

  // Project Health scan
  async function scanProject() {
    const inv = await listInventory(['uploads','bundles','icons']);
    const used = new Set();

    const iconUrlByKey = {};
    (config?.icons?.missions || []).forEach(i => { if (i.key && i.url) iconUrlByKey['missions:'+i.key]=i.url; });
    (config?.icons?.devices  || []).forEach(i => { if (i.key && i.url) iconUrlByKey['devices:'+i.key]=i.url; });

    (suite?.missions || []).forEach(m => {
      if (m.iconUrl) used.add(m.iconUrl);
      if (m.iconKey && iconUrlByKey['missions:'+m.iconKey]) used.add(iconUrlByKey['missions:'+m.iconKey]);
      const c = m.content || {};
      ['mediaUrl','imageUrl','videoUrl','assetUrl','markerUrl'].forEach(k => { if (c[k]) used.add(c[k]); });
      if (m.correct?.mediaUrl) used.add(m.correct.mediaUrl);
      if (m.wrong?.mediaUrl)   used.add(m.wrong.mediaUrl);
    });
    (getDevices() || []).forEach(d => {
      if (d.iconKey && iconUrlByKey['devices:'+d.iconKey]) used.add(iconUrlByKey['devices:'+d.iconKey]);
    });
    (config?.media?.rewardsPool || []).forEach(x => x.url && used.add(x.url));
    (config?.media?.penaltiesPool || []).forEach(x => x.url && used.add(x.url));

    const total = inv.length;
    const usedCount = used.size;
    const unused = inv.filter(i => !used.has(i.url));

    setStatus(`Scan complete: ${usedCount}/${total} media referenced; ${unused.length} unused.`);
    alert(
      `${usedCount}/${total} media referenced\n` +
      (unused.length ? `Unused files:\n- `+unused.map(u=>u.url).join('\n- ') : 'No unused files detected')
    );
  }

  async function uploadToRepo(file, subfolder='uploads') {
    if (!file) return '';
    const safeName = (file.name || 'upload').replace(/[^\w.\-]+/g, '_');
    const path   = `public/media/${subfolder}/${Date.now()}-${safeName}`;
    const isImage = (file.type && file.type.startsWith('image/')) || /\.(png|jpe?g|gif|bmp|webp|svg)$/i.test(file.name || '');
    const sizeKb = Math.max(1, Math.round((file.size || 0) / 1024));
    if (isImage && file.size > 1024 * 1024) {
      setUploadStatus(`⚠️ ${safeName} is ${sizeKb} KB — images over 1 MB may be slow to sync.`);
    } else {
      setUploadStatus(`Uploading ${safeName}…`);
    }
    const base64 = await fileToBase64(file);
    const res = await fetch('/api/upload', {
      method:'POST', headers:{ 'Content-Type':'application/json' }, credentials:'include',
      body: JSON.stringify({ path, contentBase64: base64, message:`upload ${safeName}` }),
    });
    const j = await res.json().catch(()=>({}));
    setUploadStatus(res.ok ? `✅ Uploaded ${safeName}` : `❌ ${j?.error || 'upload failed'}`);
    return res.ok ? `/${path.replace(/^public\//,'')}` : '';
  }

  const selectGameOptions = useMemo(() => {
    const baseOptions = [{ value: 'default', label: 'Default Game (root)' }];
    const extra = Array.isArray(games)
      ? games
          .filter((g) => g && g.slug && g.slug !== 'default')
          .map((g) => ({
            value: g.slug,
            label: `${g.title || g.slug}${g.mode ? ` — ${g.mode}` : ''}`,
          }))
      : [];
    const seen = new Set();
    const combined = [];
    [...baseOptions, ...extra].forEach((option) => {
      if (!option || !option.value) return;
      if (seen.has(option.value)) return;
      seen.add(option.value);
      combined.push(option);
    });
    return combined;
  }, [games]);

  if (!suite || !config) {
    return (
      <main style={{ maxWidth: 900, margin: '40px auto', color: 'var(--admin-muted)', padding: 16 }}>
        <div style={{ padding: 16, borderRadius: 12, border: '1px solid var(--admin-border-soft)', background: 'var(--appearance-panel-bg, var(--admin-panel-bg))', boxShadow: 'var(--appearance-panel-shadow, var(--admin-panel-shadow))' }}>
          Loading… (pulling config & missions)
        </div>
      </main>
    );
  }

  const mapCenter = { lat: Number(config.map?.centerLat)||44.9778, lng: Number(config.map?.centerLng)||-93.2650 };
  const mapZoom = Number(config.map?.defaultZoom)||13;

  const missionRadiusDisabled = (selectedMissionIdx==null);
  const missionRadiusValue = selectedMissionIdx!=null
    ? Number(suite.missions?.[selectedMissionIdx]?.content?.radiusMeters ?? 25)
    : 25;

  const isAddingDevice = isDeviceEditorOpen && deviceEditorMode === 'new';
  const deviceRadiusDisabled = (selectedDevIdx==null && !isAddingDevice);
  const deviceRadiusValue = selectedDevIdx!=null
    ? Number(devices?.[selectedDevIdx]?.pickupRadius ?? 0)
    : Number(devDraft.pickupRadius ?? 100);

  const storedAppearanceSkin = config.appearanceSkin && ADMIN_SKIN_TO_UI.has(config.appearanceSkin)
    ? config.appearanceSkin
    : null;
  const detectedAppearanceSkin = detectAppearanceSkin(config.appearance, config.appearanceSkin);
  const selectedAppearanceSkin = storedAppearanceSkin || detectedAppearanceSkin;
  const selectedAppearanceSkinLabel = storedAppearanceSkin
    ? `${APPEARANCE_SKIN_MAP.get(storedAppearanceSkin)?.label || storedAppearanceSkin}${detectedAppearanceSkin === 'custom' ? ' (modified)' : ''}`
    : detectedAppearanceSkin === 'custom'
      ? 'Custom (manual edits)'
      : (APPEARANCE_SKIN_MAP.get(detectedAppearanceSkin)?.label || 'Custom');
  const interfaceTone = normalizeTone(config.appearanceTone);
  const PROTECTION_COLOR_SAFE = '#16f78f';
  const PROTECTION_COLOR_ALERT = '#ff4d57';
  const protectionIndicatorColor = protectionState.enabled ? PROTECTION_COLOR_SAFE : PROTECTION_COLOR_ALERT;
  const protectionIndicatorShadow = protectionState.enabled
    ? '0 0 22px rgba(22, 247, 143, 0.65)'
    : '0 0 18px rgba(255, 77, 87, 0.75)';
  const protectionIndicatorLabel = protectionState.loading
    ? 'Checking…'
    : protectionState.enabled
      ? 'Protection Enabled'
      : 'Protection Disabled';
  const protectionToggleLabel = protectionState.enabled ? 'Disable Protection' : 'Enable Protection';
  const showProtectionIndicator = tab === 'settings';

  const selectedPinSizeDisabled = (selectedMissionIdx==null && selectedDevIdx==null);

  function updateGameTagsDraft(value) {
    setGameTagsDraft(value);
    const tags = value.split(',').map(t => t.trim()).filter(Boolean);
    setConfig(prev => {
      if (!prev) return prev;
      return normalizeGameMetadata({ ...prev, game: { ...prev.game, tags } }, slugForMeta);
    });
  }

  // Keep Main version
  function setDeployEnabled(nextEnabled) {
    const effective = gameEnabled ? nextEnabled : false;
    setConfig(prev => {
      if (!prev) return prev;
      return { ...prev, game: { ...(prev.game || {}), deployEnabled: effective } };
    });
    setDirty(true);
    setStatus(effective
      ? 'Game deployment enabled — Save & Publish will deploy the game build.'
      : (gameEnabled
        ? 'Game deployment disabled — Save & Publish updates admin data only.'
        : 'Game project mirror disabled — Save & Publish updates admin data only.'));
  }


  async function handleCoverFile(file) {
    if (!file) return;
    const safeName = file.name || 'cover';
    const looksLikeImage = (file.type && file.type.startsWith('image/')) || EXTS.image.test(file.name || '');
    if (!looksLikeImage) {
      setUploadStatus(`❌ ${safeName} is not an image file.`);
      return;
    }
    const sizeBytes = file.size || 0;
    if (sizeBytes > COVER_SIZE_LIMIT_BYTES) {
      const sizeKb = Math.max(1, Math.round(sizeBytes / 1024));
      setUploadStatus(`❌ ${safeName} is ${sizeKb} KB — please choose an image under 1 MB (PNG or JPG work best).`);
      setCoverUploadPreview('');
      setCoverUploadTarget('');
      return;
    }
    let localPreview = '';
    if (typeof window !== 'undefined' && window.URL && typeof window.URL.createObjectURL === 'function') {
      try { localPreview = window.URL.createObjectURL(file); } catch { localPreview = ''; }
    }
    if (localPreview) {
      setCoverUploadPreview(localPreview);
    }
    setCoverUploadTarget('');
    setUploadStatus(`Preparing ${safeName}…`);
    try {
      const url = await uploadToRepo(file, 'covers');
      if (!url) {
        setUploadStatus(`❌ Upload failed for ${safeName}`);
        setCoverUploadPreview('');
        setCoverUploadTarget('');
        return;
      }
      const normalizedPreview = toDirectMediaURL(url) || url;
      setCoverUploadPreview(normalizedPreview);
      setCoverUploadTarget(url);
      setConfig(prev => {
        if (!prev) return prev;
        const next = normalizeGameMetadata({ ...prev, game: { ...prev.game, coverImage: url } }, slugForMeta);
        return next;
      });
      setDirty(true);
      setInventory((prev = []) => {
        const safePrev = Array.isArray(prev) ? prev : [];
        const normalize = (value) => {
          try { return toDirectMediaURL(value || ''); } catch { return String(value || ''); }
        };
        const normalizedTarget = normalize(url);
        const already = safePrev.some((item) => {
          const candidate = item?.url || item?.path || item;
          return candidate && normalize(candidate) === normalizedTarget;
        });
        if (already) return safePrev;
        return [
          ...safePrev,
          {
            url,
            path: url,
            id: url,
            type: 'image',
            thumbUrl: url,
            label: baseNameFromUrl(url),
          },
        ];
      });
      await syncInventory();
    } catch (err) {
      setUploadStatus(`❌ ${(err?.message) || 'upload failed'}`);
      setCoverUploadPreview('');
      setCoverUploadTarget('');
    }
  }

  async function openCoverPicker() {
    setCoverPickerOpen(true);
    setCoverPickerLoading(true);
    setCoverPickerItems([]);
    try {
      const items = await listInventory(['covers','mediapool','uploads','bundles','icons']);
      const filtered = (items || []).filter(it => ['image', 'gif'].includes(it.type));
      setCoverPickerItems(filtered);
    } catch {
      setCoverPickerItems([]);
    } finally {
      setCoverPickerLoading(false);
    }
  }

  function applyCoverFromUrl(url) {
    if (!url) return;
    setCoverUploadPreview('');
    setCoverUploadTarget(url);
    setConfig(prev => {
      if (!prev) return prev;
      const next = normalizeGameMetadata({ ...prev, game: { ...prev.game, coverImage: url } }, slugForMeta);
      return next;
    });
    setDirty(true);
    setCoverPickerOpen(false);
  }

  function clearCoverImage() {
    setCoverUploadPreview('');
    setCoverUploadTarget('');
    setConfig(prev => {
      if (!prev) return prev;
      const next = normalizeGameMetadata({ ...prev, game: { ...prev.game, coverImage: '' } }, slugForMeta);
      return next;
    });
    setDirty(true);
  }

  async function saveCoverImageOnly() {
    const slug = activeSlug || 'default';
    setStatus('Saving cover image…');
    const saved = await saveAllWithSlug(slug);
    if (saved) {
      setStatus('✅ Cover image saved');
      await syncInventory();
    }
  }

  // Tabs: missions / devices / settings / text / media-pool / assigned
  const tabsOrder = ['settings','missions','devices','text','assigned','media-pool'];

  const isDefault = slugForMeta === 'default';
  const coverImageUrl = config?.game?.coverImage ? toDirectMediaURL(config.game.coverImage) : '';
  const coverPreviewUrl = coverUploadPreview || coverImageUrl;
  const hasCoverForSave = Boolean((config?.game?.coverImage || '').trim() || coverUploadPreview);
  const deployGameEnabled = config?.game?.deployEnabled === true;
  // Merged: Add playerCount from config
  const playerCount = [1, 2, 4].includes(Number(config?.game?.playerCount))
    ? Number(config.game.playerCount)
    : 1;
  // Merged: Add splashMode from config (using 'test' or 'live')
  const splashMode = config?.splash?.mode === 'live' ? 'live' : 'test';
  const headerGameTitle = (config?.game?.title || '').trim() || 'Default Game';
  const headerCoverThumb = config?.game?.coverImage
    ? toDirectMediaURL(config.game.coverImage)
    : '';
  const headerStyle = S.header;
  const metaBranchLabel = adminMeta.branch || 'unknown';
  // Keep Main version's meta details
  const metaCommitFull = adminMeta.commit || '';
  const metaCommitShort = metaCommitFull ? String(metaCommitFull).slice(0, 7) : '';
  const metaRepoLabel = adminMeta.repo ? `${adminMeta.owner ? `${adminMeta.owner}/` : ''}${adminMeta.repo}` : '';
  const metaRepoUrl = adminMeta.owner && adminMeta.repo
    ? `https://github.com/${adminMeta.owner}/${adminMeta.repo}`
    : '';
  const metaBranchUrl = metaRepoUrl && adminMeta.branch
    ? `${metaRepoUrl}/tree/${encodeURIComponent(adminMeta.branch)}`
    : '';
  const metaCommitUrl = metaRepoUrl && metaCommitFull
    ? `${metaRepoUrl}/commit/${metaCommitFull}`
    : '';
  const metaDeploymentUrl = adminMeta.deploymentUrl || adminMeta.vercelUrl || '';
  const metaDeploymentState = adminMeta.deploymentState || (metaDeploymentUrl ? 'UNKNOWN' : '');
  const metaTimestampLabel = adminMeta.fetchedAt ? formatLocalDateTime(adminMeta.fetchedAt) : '';
  const metaDeploymentLinkLabel = metaDeploymentUrl ? metaDeploymentUrl.replace(/^https?:\/\//, '') : '';
  const coverStatusMessage = coverImageUrl
    ? 'Cover art ready — use Save Cover Image to persist immediately or replace it below.'
    : coverUploadPreview
      ? 'Cover preview loaded — Save Cover Image or Save & Publish to keep this artwork.'
      : 'No cover selected yet — add artwork in the settings panel.';
  const activeSlugForClient = isDefault ? '' : activeSlug; // omit for Default Game

  return (
    <div style={S.body}>
      <div style={S.metaBanner}>
        {/* Keep Main version's meta layout */}
        <div style={{ ...S.metaBannerLine, flexWrap:'wrap', gap:12 }}>
          {metaRepoLabel && (
            <span>
              <strong>Repo:</strong>{' '}
              {metaRepoUrl ? (
                <a href={metaRepoUrl} target="_blank" rel="noreferrer" style={S.metaLink}>
                  {metaRepoLabel}
                </a>
              ) : (
                metaRepoLabel
              )}
            </span>
          )}
          <span>
            <strong>Branch:</strong>{' '}
            {metaBranchUrl ? (
              <a href={metaBranchUrl} target="_blank" rel="noreferrer" style={S.metaLink}>
                {metaBranchLabel}
              </a>
            ) : (
              metaBranchLabel
            )}
          </span>
          {metaCommitFull && (
            <span>
              <strong>Commit:</strong>{' '}
              {metaCommitUrl ? (
                <a href={metaCommitUrl} target="_blank" rel="noreferrer" style={S.metaLink}>
                  {metaCommitShort || metaCommitFull.slice(0, 7)}
                </a>
              ) : (
                metaCommitShort || metaCommitFull.slice(0, 7)
              )}
            </span>
          )}
          {metaDeploymentState && (
            <span>
              <strong>Deployment:</strong>{' '}
              {metaDeploymentUrl ? (
                <a href={metaDeploymentUrl} target="_blank" rel="noreferrer" style={S.metaLink}>
                  {metaDeploymentState}
                </a>
              ) : (
                metaDeploymentState
              )}
            </span>
          )}
          <span>
            <strong>Game Mirror:</strong>{' '}
            {gameEnabled ? 'ENABLED' : 'DISABLED'}
          </span>
        </div>
        <div style={{ ...S.metaBannerLine, flexWrap:'wrap', gap:12 }}>
          {metaDeploymentLinkLabel && (
            <span>
              <strong>Preview:</strong>{' '}
              <a href={metaDeploymentUrl} target="_blank" rel="noreferrer" style={S.metaLink}>
                {metaDeploymentLinkLabel}
              </a>
            </span>
          )}
          {metaTimestampLabel && (
            <span><strong>Checked:</strong> {metaTimestampLabel}</span>
          )}
          {adminMeta.error && (
            <span style={S.metaBannerError}>{adminMeta.error}</span>
          )}
        </div>
      </div>
      <header style={headerStyle}>
        <div style={S.wrap}>
          <div style={S.headerTopRow}>
            <div style={S.headerTitleGroup}>
              <div style={S.headerCoverFrame}>
                {headerCoverThumb ? (
                  <img
                    src={headerCoverThumb}
                    alt="Active game cover"
                    style={S.headerCoverThumb}
                  />
                ) : (
                  <div style={S.headerCoverPlaceholder}>No Cover</div>
                )}
              </div>
              <div style={S.headerTitleColumn}>
                <div style={S.headerGameTitle}>{headerGameTitle}</div>
                <div style={S.headerSubtitle}>Admin Control Deck</div>
              </div>
            </div>
          </div>
          <div style={S.headerNavRow}>
            <div style={S.headerNavPrimary}>
              {tabsOrder.map((t)=>{
                const labelMap = {
                  'missions':'MISSIONS',
                  'devices':'DEVICES',
                  'settings':'SETTINGS',
                  'text':'TEXT',
                  'media-pool':'MEDIA POOL',
                  'assigned':'ASSIGNED MEDIA',
                };
                return (
                  <button key={t} onClick={()=>setTab(t)} style={{ ...S.tab, ...(tab===t?S.tabActive:{}) }}>
                    {labelMap[t] || t.toUpperCase()}
                  </button>
                );
              })}
              <button
                onClick={async ()=>{
                  await saveAndPublish();
                  // Reload logic seems redundant here, handled by saveAndPublish
                  // const isDefaultNow = !activeSlug || activeSlug === 'default';
                  // setActiveSlug(isDefaultNow ? 'default' : activeSlug);
                }}
                disabled={savePubBusy}
                style={{ ...S.button, ...S.savePublishButton, opacity: savePubBusy ? 0.65 : 1 }}
              >
                {savePubBusy ? 'Saving & Publishing…' : 'Save & Publish'}
              </button>
            </div>
            {/* Keep Main version's condition and content for game selector/deploy controls */}
            {tab !== 'settings' && (
              <div style={S.headerNavSecondary}>
                <label style={{ color:'var(--admin-muted)', fontSize:12 }}>Game:</label>
                <select value={activeSlug} onChange={(e)=>setActiveSlug(e.target.value)} style={{ ...S.input, width:280 }}>
                  <option value="default">(Default Game)</option>
                  {games.map(g=>(
                    <option key={g.slug} value={g.slug}>{g.title} — {g.slug} ({g.mode||'single'})</option>
                  ))}
                </select>
                <label style={{ color:'var(--admin-muted)', fontSize:12, display:'flex', alignItems:'center', gap:6 }}>
                  <input
                    type="checkbox"
                    checked={deployGameEnabled}
                    onChange={(e)=>setDeployEnabled(e.target.checked)}
                    disabled={!gameEnabled}
                  />
                  Deploy game build
                </label>
                <label style={{ color:'var(--admin-muted)', fontSize:12, display:'flex', alignItems:'center', gap:6 }}>
                  Deploy delay (sec):
                  <input
                    type="number" min={0} max={120}
                    value={deployDelaySec}
                    onChange={(e)=> setDeployDelaySec(Math.max(0, Math.min(120, Number(e.target.value || 0))))}
                    style={{ ...S.input, width:90, opacity: deployGameEnabled && gameEnabled ? 1 : 0.45 }}
                    disabled={!deployGameEnabled || !gameEnabled}
                  />
                </label>
                {!gameEnabled && (
                  <span style={{ ...S.metaMuted, display:'flex', alignItems:'center', gap:6 }}>
                    ⚠️ Game folder mirroring disabled — deploy controls are read-only.
                  </span>
                )}
              </div>
            )}
          </div>

          {(showProtectionIndicator || tab === 'settings') && (
            <div style={{ display:'flex', gap:16, justifyContent:'space-between', alignItems:'stretch', flexWrap:'wrap', marginBottom:16 }}>
              <div style={{ flex:'1 1 520px', minWidth:280, display:'flex', flexDirection:'column', gap:12 }}>
                {showProtectionIndicator && (
                  <div style={{ display:'flex', alignItems:'center', gap:12, flexWrap:'wrap' }}>
                    <div
                      style={{
                        display:'flex',
                        alignItems:'center',
                        gap:10,
                        padding:'8px 16px',
                        borderRadius:999,
                        border:`1px solid ${protectionIndicatorColor}`,
                        background:'var(--appearance-panel-bg, var(--admin-panel-bg))',
                        color: protectionIndicatorColor,
                        fontWeight:700,
                        letterSpacing:1,
                        textTransform:'uppercase',
                        boxShadow: protectionIndicatorShadow,
                      }}
                    >
                      <span style={{ display:'inline-block', width:16, height:16, borderRadius:'50%', background:protectionIndicatorColor, boxShadow: protectionIndicatorShadow }} />
                      {protectionIndicatorLabel}
                    </div>
                    <button
                      onClick={openProtectionPrompt}
                      disabled={protectionState.saving || protectionState.loading}
                      style={{
                        ...S.button,
                        ...(protectionState.enabled ? S.buttonDanger : S.buttonSuccess),
                        minWidth: 180,
                        opacity: (protectionState.saving || protectionState.loading) ? 0.7 : 1,
                      }}
                    >
                      {protectionState.saving ? 'Updating…' : protectionToggleLabel}
                    </button>
                  </div>
                )}
              </div>
              {/* Keep Main version's condition for cover summary */}
              {tab !== 'settings' && (
                <div style={S.coverSummary}>
                  <div style={{ fontWeight:700 }}>Cover status</div>
                  <div style={{ fontSize:12, color:'var(--admin-muted)' }}>
                    {coverStatusMessage}
                  </div>
                </div>
              )}
            </div>
          )}
          {showProtectionIndicator && protectionError && (
            <div style={{ color: PROTECTION_COLOR_ALERT, fontSize: 12, marginBottom: 12 }}>
              {protectionError}
            </div>
          )}
          <div style={{ color:'var(--admin-muted)', marginTop:6, whiteSpace:'pre-wrap' }}>{status}</div>
        </div>
      </header>

      {/* MISSIONS */}
      {tab==='missions' && (
        <main style={S.wrapGrid2}>
          {/* Left list */}
          <aside style={S.sidebarTall}>
            <div style={S.sidebarBar}>
              {/* Merge: Keep neutral text */}
              <div style={S.noteText}>Launch a brand-new mission in this timeline.</div>
              <button
                onClick={startNew}
                style={{
                  ...S.action3DButton,
                  ...(newMissionButtonFlash ? S.action3DFlash : {}),
                }}
                title="Create a new mission and open the editor"
              >
                + New Mission
              </button>
            </div>
            <input
              placeholder="Search…"
              onChange={(e) => {
                const q=e.target.value.toLowerCase();
                document.querySelectorAll('[data-m-title]').forEach(it=>{
                  const t=(it.getAttribute('data-m-title')||'').toLowerCase();
                  it.style.display = t.includes(q) ? '' : 'none';
                });
              }}
              style={S.search}
            />
            <div>
              {(suite.missions||[]).map((m, idx)=>(
                <div key={m.id} data-m-title={(m.title||'')+' '+m.id+' '+m.type} style={S.missionItem}>
                  <div style={{ display:'grid', gridTemplateColumns:'auto 1fr auto', gap:8, alignItems:'center' }}>
                    <button style={{ ...S.button, padding:'6px 10px' }} onClick={()=>removeMission(m.id)}>Delete</button>
                    <div onClick={()=>editExisting(m)} style={{ cursor:'pointer' }}>
                      <div style={{ fontWeight:600 }}>
                        <span style={{ opacity:.65, marginRight:6 }}>#{idx+1}</span>{m.title||m.id}
                      </div>
                      <div style={{ color:'var(--admin-muted)', fontSize:12 }}>{TYPE_LABELS[m.type] || m.type} — id: {m.id}</div>
                    </div>
                    <div style={{ display:'flex', gap:6 }}>
                      <button title="Move up"   style={{ ...S.button, padding:'6px 10px' }} onClick={()=>moveMission(idx,-1)}>▲</button>
                      <button title="Move down" style={{ ...S.button, padding:'6px 10px' }} onClick={()=>moveMission(idx,+1)}>▼</button>
                      <button title="Duplicate" style={{ ...S.button, padding:'6px 10px' }} onClick={()=>duplicateMission(idx)}>⧉</button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </aside>

          {/* Right: Missions Map */}
          <section style={{ position:'relative' }}>
            <div style={S.card}>
              <div style={{ display:'flex', justifyContent:'space-between', alignItems:'flex-end', gap:12, marginBottom:8, flexWrap:'wrap' }}>
                <div>
                  {/* Merge: Keep neutral title */}
                  <h3 style={{ margin:0 }}>Missions Map</h3>
                  <div style={{ color:'var(--admin-muted)', fontSize:12 }}>
                    Click a <b>mission</b> pin to select. Drag the selected mission, or click the map to move it. Devices are visible here but not editable.
                  </div>
                </div>
                <div style={{ display:'flex', alignItems:'center', gap:12, flexWrap:'wrap' }}>
                  <label style={{ display:'flex', alignItems:'center', gap:6 }}>
                    <input type="checkbox" checked={showRings} onChange={(e)=>setShowRings(e.target.checked)}/> Show radius rings
                  </label>
                  <label style={{ display:'flex', alignItems:'center', gap:6 }}>
                    Selected pin size:
                    <input type="range" min={16} max={48} step={2} value={selectedPinSize}
                      disabled={selectedMissionIdx==null}
                      onChange={(e)=>setSelectedPinSize(Number(e.target.value))}
                    />
                    <code style={{ color:'var(--admin-muted)' }}>{selectedMissionIdx==null ? '—' : `${selectedPinSize}px`}</code>
                  </label>
                </div>
              </div>

              <div style={{ display:'grid', gridTemplateColumns:'1fr auto', gap:8, alignItems:'center', marginBottom:8 }}>
                <input
                  type="range" min={5} max={500} step={5}
                  disabled={missionRadiusDisabled}
                  value={missionRadiusValue}
                  onChange={(e)=> setSelectedMissionRadius(Number(e.target.value)) }
                />
                <code style={{ color:'var(--admin-muted)' }}>
                  {selectedMissionIdx==null ? 'Select a mission to adjust radius' : `M${selectedMissionIdx+1} radius: ${missionRadiusValue} m`}
                </code>
              </div>

              <MapOverview
                missions={(suite?.missions)||[]}
                devices={(config?.devices)||[]}
                icons={config?.icons || DEFAULT_ICONS}
                showRings={showRings}
                interactive={false}
                draftDevice={null}
                selectedDevIdx={null}
                selectedMissionIdx={selectedMissionIdx}
                onDraftChange={null}
                onMoveSelected={null}
                onMoveSelectedMission={(lat,lng)=>moveSelectedMission(lat,lng)}
                onSelectDevice={null}
                onSelectMission={(i)=>{ setSelectedMissionIdx(i); }}
                mapCenter={mapCenter}
                mapZoom={mapZoom}
                defaultIconSizePx={defaultPinSize}
                selectedIconSizePx={selectedPinSize}
                readOnly={false}
                lockToRegion={false}
              />
            </div>

            {/* Mission editor (overlay) */}
            {editing && (
              <div style={S.overlay}>
                <div style={{ ...S.card, width:'min(860px, 94vw)', maxHeight:'82vh', overflowY:'auto', position:'relative' }}>
                  <div style={S.floatingBarTop}>
                    <div style={S.overlayBarSide}>
                      <button
                        style={S.cancelGlowButton}
                        onClick={cancelEdit}
                        title="Close the mission editor without saving"
                      >
                        Cancel & Close
                      </button>
                      <div style={S.noteText}>Exit safely without saving changes.</div>
                    </div>
                    <div style={S.overlayCenter}>
                      <div style={S.overlayIdRow}>
                        <span style={S.overlayIdLabel}>Mission ID</span>
                        <code style={S.overlayIdValue}>{editing.id || '—'}</code>
                      </div>
                      {/* Merge: Use "Edit Mission" for title */}
                      <h3 style={{ margin: '0', fontSize: 18 }}>
                        {editingIsNew ? 'New Mission' : 'Edit Mission'}
                      </h3>
                      <input
                        style={{ ...S.input, width: '100%', maxWidth: 320, textAlign: 'center' }}
                        value={editing.title || ''}
                        onChange={(e) => {
                          setEditing({ ...editing, title: e.target.value });
                          setDirty(true);
                        }}
                        placeholder="Mission title"
                      />
                      <div style={S.noteText}>This label appears inside the admin and player timelines.</div>
                    </div>
                    <div style={S.overlayBarSide}>
                      <button
                        style={{
                          ...S.action3DButton,
                          ...(missionActionFlash ? S.action3DFlash : {}),
                        }}
                        onClick={handleMissionSave}
                        // Merge: Use "Save & Close" for button text
                        title={editingIsNew ? 'Save this new mission to the list' : 'Save changes and close'}
                      >
                        {editingIsNew ? 'Save New Mission' : 'Save & Close'}
                      </button>
                      <div style={S.noteText}>Glows green each time a mission save succeeds.</div>
                    </div>
                  </div>

                  <Field label="Type">
                    <select style={S.input} value={editing.type}
                      onChange={(e)=>{ const t=e.target.value; setEditing({ ...editing, type:t, content:defaultContentForType(t) }); setDirty(true); }}>
                      {Object.keys(TYPE_FIELDS).map((k)=>(
                        <option key={k} value={k}>{TYPE_LABELS[k] || k}</option>
                      ))}
                    </select>
                  </Field>

                  {/* Icon select with thumbnail (inventory-only) */}
                  <Field label="Icon">
                    <div style={{ display:'grid', gridTemplateColumns:'1fr auto', gap:8, alignItems:'center' }}>
                      <select
                        style={S.input}
                        value={editing.iconKey || ''}
                        onChange={(e)=>{ setEditing({ ...editing, iconKey:e.target.value }); setDirty(true); }}
                      >
                        <option value="">(default)</option>
                        {(config?.icons?.missions||[]).map((it)=>(
                          <option key={it.key} value={it.key}>{it.name||it.key}</option>
                        ))}
                      </select>
                      <div>
                        {(() => {
                          const sel = (config?.icons?.missions||[]).find(it => it.key === editing.iconKey);
                          return sel?.url
                            ? <img alt="icon" src={toDirectMediaURL(sel.url)} style={{ width:48, height:48, objectFit:'contain', border:'1px solid var(--admin-border-soft)', borderRadius:8 }}/>
                            : <div style={{ width:48, height:48, border:'1px dashed var(--admin-border-soft)', borderRadius:8, display:'grid', placeItems:'center', color:'var(--admin-muted)' }}>icon</div>;
                        })()}
                      </div>
                    </div>
                  </Field>

                  <hr style={S.hr}/>

                  {editing.type === 'multiple_choice' && (
                    <>
                      <Field label="Question">
                        <input
                          style={S.input}
                          value={editing.content?.question || ''}
                          onChange={(e)=>{ setEditing({ ...editing, content:{ ...(editing.content||{}), question:e.target.value } }); setDirty(true); }}
                        />
                      </Field>
                      <div style={{ marginBottom: 12 }}>
                        <MultipleChoiceEditor
                          value={Array.isArray(editing.content?.choices) ? editing.content.choices : []}
                          correctIndex={editing.content?.correctIndex}
                          onChange={({ choices, correctIndex }) => {
                            setEditing({ ...editing, content: { ...editing.content, choices, correctIndex } });
                            setDirty(true);
                          }}
                        />
                      </div>
                    </>
                  )}

                  {editing.type === 'short_answer' && (
                    <>
                      <Field label="Question">
                        <input
                          style={S.input}
                          value={editing.content?.question || ''}
                          onChange={(e)=>{ setEditing({ ...editing, content:{ ...(editing.content||{}), question:e.target.value } }); setDirty(true); }}
                        />
                      </Field>
                      <Field label="Correct Answer">
                        <input
                          style={S.input}
                          value={editing.content?.answer || ''}
                          onChange={(e)=>{ setEditing({ ...editing, content:{ ...(editing.content||{}), answer:e.target.value } }); setDirty(true); }}
                        />
                      </Field>
                      <Field label="Also Accept (comma-separated) (optional)">
                        <input
                          style={S.input}
                          value={editing.content?.acceptable || ''}
                          onChange={(e)=>{ setEditing({ ...editing, content:{ ...(editing.content||{}), acceptable:e.target.value } }); setDirty(true); }}
                        />
                      </Field>
                    </>
                  )}

                  {editing.type === 'statement' && (
                    <Field label="Statement Text">
                      <textarea
                        style={{ ...S.input, height: 120, fontFamily: 'ui-monospace, Menlo' }}
                        value={editing.content?.text || ''}
                        onChange={(e) => {
                          setEditing({ ...editing, content: { ...(editing.content || {}), text: e.target.value } });
                          setDirty(true);
                        }}
                      />
                    </Field>
                  )}

                  {(editing.type==='geofence_image'||editing.type==='geofence_video') && (
                    <div style={{ marginBottom:12 }}>
                      <div style={{ fontSize:12, color:'var(--admin-muted)', marginBottom:6 }}>Pick location & radius</div>
                      <MapPicker
                        lat={editing.content?.lat} lng={editing.content?.lng} radius={editing.content?.radiusMeters ?? 25}
                        center={mapCenter}
                        onChange={(l1,l2,rad)=>{ setEditing({ ...editing, content:{ ...editing.content, lat:l1, lng:l2, radiusMeters:clamp(rad,5,500) } }); setDirty(true); }}
                      />
                    </div>
                  )}

                  {(editing.type==='multiple_choice'||editing.type==='short_answer'||editing.type==='statement'||editing.type==='video'||editing.type==='stored_statement') && (
                    <div style={{ marginBottom:12 }}>
                      <label style={{ display:'flex', gap:8, alignItems:'center', marginBottom:8 }}>
                        <input type="checkbox" checked={!!editing.content?.geofenceEnabled}
                          onChange={(e)=>{ const on=e.target.checked;
                            const next={ ...editing.content, geofenceEnabled:on };
                            if (on && (!isFinite(Number(next.lat)) || !isFinite(Number(next.lng)))) { next.lat=mapCenter.lat; next.lng=mapCenter.lng; }
                            setEditing({ ...editing, content:next }); setDirty(true);
                          }}/> Enable geofence for this mission
                      </label>
                      {editing.content?.geofenceEnabled && (
                        <>
                          <MapPicker
                            lat={editing.content?.lat} lng={editing.content?.lng} radius={editing.content?.radiusMeters ?? 25}
                            center={mapCenter}
                            onChange={(l1,l2,rad)=>{ setEditing({ ...editing, content:{ ...editing.content, lat:l1, lng:l2, radiusMeters:clamp(rad,5,500) } }); setDirty(true); }}
                          />
                          <Field label="Cooldown (sec)">
                            <input type="number" min={0} max={3600} style={S.input}
                              value={editing.content?.cooldownSeconds ?? 30}
                              onChange={(e)=>{ const v=Number(e.target.value||0); setEditing({ ...editing, content:{ ...editing.content, cooldownSeconds:v } }); setDirty(true); }}
                            />
                          </Field>
                        </>
                      )}
                    </div>
                  )}

                  {(TYPE_FIELDS[editing.type] || [])
                    .filter(f => !(editing.type === 'multiple_choice' && f.key === 'question'))
                    .filter(f => !(editing.type === 'short_answer' && (f.key === 'question' || f.key === 'answer' || f.key === 'acceptable')))
                    .filter(f => !(editing.type === 'statement' && f.key === 'text'))
                    .map((f)=>(
                    <Field key={f.key} label={f.label}>
                      {f.type==='text' && (
                        <>
                          <input style={S.input} value={editing.content?.[f.key] || ''}
                            onChange={(e)=>{ setEditing({ ...editing, content:{ ...editing.content, [f.key]: e.target.value } }); setDirty(true); }}/>
                          {['mediaUrl','imageUrl','videoUrl','assetUrl','markerUrl'].includes(f.key) && (
                            <MediaPreview url={editing.content?.[f.key]} kind={f.key}/>
                          )}
                        </>
                      )}
                      {f.type==='number' && (
                        <input type="number" min={f.min} max={f.max} style={S.input}
                          value={editing.content?.[f.key] ?? ''} onChange={(e)=>{
                            const v = e.target.value==='' ? '' : Number(e.target.value);
                            const vClamped = (f.key==='radiusMeters') ? clamp(v,5,500) : v;
                            setEditing({ ...editing, content:{ ...editing.content, [f.key]:vClamped } }); setDirty(true);
                          }}/>
                      )}
                      {f.type==='multiline' && (
                        <textarea style={{ ...S.input, height:120, fontFamily:'ui-monospace, Menlo' }}
                          value={editing.content?.[f.key] || ''} onChange={(e)=>{
                            setEditing({ ...editing, content:{ ...editing.content, [f.key]: e.target.value } }); setDirty(true);
                          }}/>
                      )}
                    </Field>
                  ))}

                  <Field label="Points (Reward)">
                    <input type="number" style={S.input} value={editing.rewards?.points ?? 0}
                      onChange={(e)=>{ const v=e.target.value===''?0:Number(e.target.value);
                        setEditing({ ...editing, rewards:{ ...(editing.rewards||{}), points:v } }); setDirty(true); }}/>
                  </Field>

                  {/* Trigger Section */}
                  <div style={{ marginTop:16, border:'1px solid var(--admin-border-soft)', borderRadius:10, padding:12 }}>
                    <div style={{ fontWeight:700, marginBottom:8 }}>Trigger</div>
                    <label style={{ display:'flex', alignItems:'center', gap:8 }}>
                      <input
                        type="checkbox"
                        checked={missionTriggerState.enabled}
                        onChange={(e)=>{
                          setMissionTriggerPicker('');
                          updateMissionTrigger({ enabled: e.target.checked });
                        }}
                      />
                      <span>Trigger Device — when this device is breached or deployed it will create an action.</span>
                    </label>

                    {missionTriggerState.enabled ? (() => {
                      const trigger = missionTriggerState;
                      const actionOptions = triggerOptionSets[trigger.actionType] || [];
                      const selectedAction = actionOptions.find(opt => opt.id === trigger.actionTarget) || null;
                      const actionPreview = trigger.actionThumbnail || selectedAction?.thumbnail || '';
                      const resolvedActionPreview = actionPreview ? toDirectMediaURL(actionPreview) : '';
                      const deviceOptions = triggerOptionSets.devices || [];
                      const selectedDevice = deviceOptions.find(opt => opt.id === trigger.triggerDeviceId) || null;
                      const responseOptions = triggerOptionSets.responses || [];
                      const selectedResponse = responseOptions.find(opt => opt.id === trigger.triggeredResponseKey) || null;
                      const missionOptions = triggerOptionSets.missions || [];
                      const selectedMission = missionOptions.find(opt => opt.id === trigger.triggeredMissionId) || null;
                      const responsePreview = selectedResponse?.thumbnail ? toDirectMediaURL(selectedResponse.thumbnail) : '';
                      const devicePreview = selectedDevice?.thumbnail ? toDirectMediaURL(selectedDevice.thumbnail) : '';
                      const missionPreview = selectedMission?.thumbnail ? toDirectMediaURL(selectedMission.thumbnail) : '';
                      return (
                        <>
                          <div style={{ marginTop:12, display:'flex', gap:10, alignItems:'center', flexWrap:'wrap' }}>
                            <div style={{ fontSize:12, color:'var(--admin-muted)' }}>Action type</div>
                            <select
                              style={S.input}
                              value={trigger.actionType}
                              onChange={(e)=>{
                                setMissionTriggerPicker('');
                                updateMissionTrigger({ actionType: e.target.value, actionTarget:'', actionLabel:'', actionThumbnail:'' });
                              }}
                            >
                              <option value="media">Media</option>
                              <option value="devices">Devices</option>
                              <option value="missions">Missions</option>
                            </select>
                          </div>

                          <TriggerDropdown
                            label="Action target"
                            openKey={missionTriggerPicker}
                            setOpenKey={setMissionTriggerPicker}
                            dropdownKey="mission-action"
                            options={actionOptions}
                            selected={selectedAction}
                            onSelect={(opt)=>{
                              updateMissionTrigger({
                                actionTarget: opt?.id || '',
                                actionLabel: opt?.label || '',
                                actionThumbnail: opt?.thumbnail || '',
                              });
                            }}
                          />
                          {resolvedActionPreview && (
                            <div style={{ marginTop:10, display:'flex', alignItems:'center', gap:12 }}>
                              <div style={{ fontSize:12, color:'var(--admin-muted)' }}>Selected action preview</div>
                              <div style={{ width:80, height:60, borderRadius:10, overflow:'hidden', border:'1px solid var(--admin-border-soft)', background:'var(--admin-tab-bg)', display:'grid', placeItems:'center' }}>
                                <img src={resolvedActionPreview} alt="action preview" style={{ width:'100%', height:'100%', objectFit:'cover' }} />
                              </div>
                            </div>
                          )}

                          <TriggerDropdown
                            label="Trigger Device"
                            openKey={missionTriggerPicker}
                            setOpenKey={setMissionTriggerPicker}
                            dropdownKey="mission-device"
                            options={deviceOptions}
                            selected={selectedDevice}
                            onSelect={(opt)=>{
                              updateMissionTrigger({
                                triggerDeviceId: opt?.id || '',
                                triggerDeviceLabel: opt?.label || '',
                              });
                            }}
                          />
                          {devicePreview && (
                            <div style={{ marginTop:10, display:'flex', alignItems:'center', gap:12 }}>
                              <div style={{ fontSize:12, color:'var(--admin-muted)' }}>Device preview</div>
                              <div style={{ width:72, height:56, borderRadius:10, overflow:'hidden', border:'1px solid var(--admin-border-soft)', background:'var(--admin-tab-bg)', display:'grid', placeItems:'center' }}>
                                <img src={devicePreview} alt="device preview" style={{ width:'100%', height:'100%', objectFit:'cover' }} />
                              </div>
                            </div>
                          )}

                          <TriggerDropdown
                            label="Triggered Response"
                            openKey={missionTriggerPicker}
                            setOpenKey={setMissionTriggerPicker}
                            dropdownKey="mission-response"
                            options={responseOptions}
                            selected={selectedResponse}
                            onSelect={(opt)=>{
                              updateMissionTrigger({
                                triggeredResponseKey: opt?.id || '',
                              });
                            }}
                          />
                          {responsePreview && (
                            <div style={{ marginTop:10, display:'flex', alignItems:'center', gap:12 }}>
                              <div style={{ fontSize:12, color:'var(--admin-muted)' }}>Response preview</div>
                              <div style={{ width:80, height:60, borderRadius:10, overflow:'hidden', border:'1px solid var(--admin-border-soft)', background:'var(--admin-tab-bg)', display:'grid', placeItems:'center' }}>
                                <img src={responsePreview} alt="response preview" style={{ width:'100%', height:'100%', objectFit:'cover' }} />
                              </div>
                            </div>
                          )}

                          <TriggerDropdown
                            label="Triggered Mission"
                            openKey={missionTriggerPicker}
                            setOpenKey={setMissionTriggerPicker}
                            dropdownKey="mission-mission"
                            options={missionOptions}
                            selected={selectedMission}
                            onSelect={(opt)=>{
                              updateMissionTrigger({
                                triggeredMissionId: opt?.id || '',
                              });
                            }}
                          />
                          {missionPreview && (
                            <div style={{ marginTop:10, display:'flex', alignItems:'center', gap:12 }}>
                              <div style={{ fontSize:12, color:'var(--admin-muted)' }}>Triggered mission preview</div>
                              <div style={{ width:72, height:56, borderRadius:10, overflow:'hidden', border:'1px solid var(--admin-border-soft)', background:'var(--admin-tab-bg)', display:'grid', placeItems:'center' }}>
                                <img src={missionPreview} alt="mission preview" style={{ width:'100%', height:'100%', objectFit:'cover' }} />
                              </div>
                            </div>
                          )}
                        </>
                      );
                    })() : (
                      <div style={{ marginTop:8, color:'var(--admin-muted)', fontSize:12 }}>Enable Trigger Device to configure trigger actions.</div>
                    )}
                  </div>


                  {/* Mission Response (Correct/Wrong): below map, above Continue */}
                  <SafeBoundary
                    fallback={missionResponsesFallback}
                    onError={(error) => {
                      console.error('Mission responses render failure', error);
                      setMissionResponsesError(error);
                      const message = error?.message || error || 'unknown error';
                      setStatus(`❌ Mission responses failed to load: ${message}`);
                    }}
                    onReset={() => setMissionResponsesError(null)}
                    resetKeys={[missionResponsesError, editing, inventory]}
                  >
                    <InlineMissionResponses editing={editing} setEditing={setEditing} inventory={inventory} />
                  </SafeBoundary>

                  <hr style={S.hr} />
                  <label style={{ display:'flex', alignItems:'center', gap:8, marginBottom:8 }}>
                    <input
                      type="checkbox"
                      checked={editing.showContinue !== false}
                      onChange={(e)=>{ setEditing({ ...editing, showContinue: e.target.checked }); setDirty(true); }}
                    />
                    Show “Continue” button to close this mission
                  </label>

                  <label style={{ display:'flex', alignItems:'center', gap:8, marginBottom:8 }}>
                    <input type="checkbox" checked={!!editing.appearanceOverrideEnabled}
                      onChange={(e)=>{ setEditing({ ...editing, appearanceOverrideEnabled:e.target.checked }); setDirty(true); }}/>
                    Use custom appearance for this mission
                  </label>
                  {editing.appearanceOverrideEnabled && (
                    <AppearanceEditor value={editing.appearance||defaultAppearance()}
                      tone={interfaceTone}
                      onChange={(next)=>{ setEditing({ ...editing, appearance:next }); setDirty(true); }}/>
                  )}

                  {dirty && <div style={{ marginTop:6, color:'#ffd166' }}>Unsaved changes…</div>}
                </div>
              </div>
            )}
          </section>
        </main>
      )}

      {/* DEVICES */}
      {tab==='devices' && (
        <main style={S.wrapGrid2}>
          <aside style={S.sidebarTall}>
            <div style={{ display:'grid', gridTemplateColumns:'1fr', gap:8, marginBottom:8 }}>
              <form onSubmit={devSearch} style={{ display:'grid', gridTemplateColumns:'1fr auto auto', gap:8 }}>
                <input placeholder="Search address or place…" style={S.input} value={devSearchQ} onChange={(e)=>setDevSearchQ(e.target.value)} />
                <button type="button" style={S.button} onClick={useMyLocation}>📍 My location</button>
                <button type="submit" disabled={devSearching} style={S.button}>{devSearching ? 'Searching…' : 'Search'}</button>
              </form>

              <div style={{ background:'var(--admin-input-bg)', border:'1px solid var(--admin-border-soft)', borderRadius:10, padding:8, maxHeight:180, overflow:'auto', display: devResults.length>0 ? 'block' : 'none' }}>
                {devResults.map((r,i)=>(
                  <div key={i} onClick={()=>applySearchResult(r)} style={{ padding:'6px 8px', cursor:'pointer', borderBottom:'1px solid var(--admin-border-soft)' }}>
                    <div style={{ fontWeight:600 }}>{r.display_name}</div>
                    <div style={{ color:'var(--admin-muted)', fontSize:12 }}>lat {Number(r.lat).toFixed(6)}, lng {Number(r.lon).toFixed(6)}</div>
                  </div>
                ))}
              </div>
            </div>

            <div style={S.sidebarBar}>
              <div style={S.noteText}>Deploy devices and markers from this control strip.</div>
              <div style={{ display:'flex', gap:8, alignItems:'center', flexWrap:'wrap', justifyContent:'flex-end' }}>
                {selectedDevIdx!=null && (
                  <button
                    style={S.button}
                    onClick={()=>{ setSelectedDevIdx(null); closeDeviceEditor(); }}
                    title="Deselect the highlighted device"
                  >
                    Clear selection
                  </button>
                )}
                <button
                  style={{
                    ...S.action3DButton,
                    ...(addDeviceButtonFlash ? S.action3DFlash : {}),
                  }}
                  onClick={addDevice}
                  title="Create a new device draft"
                >
                  + Add Device
                </button>
              </div>
            </div>

            <div style={{ display:'flex', flexDirection:'column', gap:8 }}>
              {(devices||[]).map((x,i)=>{
                const iconUrl = x.iconKey ? deviceIconUrlFromKey(x.iconKey) : '';
                const selected = selectedDevIdx === i;
                const hasCoords = typeof x.lat === 'number' && typeof x.lng === 'number';
                return (
                  <div
                    key={x.id||i}
                    onClick={()=>openDeviceEditor(i)}
                    style={{
                      display:'grid',
                      gridTemplateColumns:'56px 1fr auto',
                      gap:12,
                      alignItems:'center',
                      padding:12,
                      borderRadius:12,
                      border:`1px solid ${selected ? 'rgba(45, 212, 191, 0.35)' : 'var(--admin-border-soft)'}`,
                      background:selected ? 'var(--admin-tab-active-bg)' : 'var(--appearance-panel-bg, var(--admin-panel-bg))',
                      cursor:'pointer',
                    }}
                  >
                    <div style={{ width:52, height:52, borderRadius:10, background:'var(--appearance-panel-bg, var(--admin-panel-bg))', border:'1px solid var(--admin-border-soft)', display:'grid', placeItems:'center', overflow:'hidden' }}>
                      {iconUrl
                        ? <img alt={x.title || 'device icon'} src={toDirectMediaURL(iconUrl)} style={{ width:'100%', height:'100%', objectFit:'contain' }}/>
                        : <div style={{ color:'var(--admin-muted)', fontSize:12, textAlign:'center', padding:'6px 4px' }}>{(x.type||'D').slice(0,1).toUpperCase()}</div>}
                    </div>
                    <div>
                      <div style={{ display:'flex', justifyContent:'space-between', alignItems:'center', gap:8 }}>
                        <div style={{ fontWeight:600 }}>{`D${i+1}`} — {x.title || '(untitled)'}</div>
                        <div style={{ fontSize:12, color:'var(--admin-muted)' }}>{hasCoords ? `${Number(x.lat).toFixed(4)}, ${Number(x.lng).toFixed(4)}` : 'Not placed'}</div>
                      </div>
                      <div style={{ marginTop:6, display:'flex', gap:8, flexWrap:'wrap', fontSize:12 }}>
                        <span style={S.chip}>{x.type}</span>
                        <span style={S.chip}>Radius {x.pickupRadius} m</span>
                        <span style={S.chip}>Effect {x.effectSeconds}s</span>
                      </div>
                    </div>
                    <div onClick={(e)=>e.stopPropagation()} style={{ display:'flex', flexDirection:'column', gap:6 }}>
                      <div style={{ display:'flex', gap:6 }}>
                        <button title="Move up" style={{ ...S.button, padding:'6px 10px' }} disabled={i===0} onClick={()=>moveDevice(i,-1)}>▲</button>
                        <button title="Move down" style={{ ...S.button, padding:'6px 10px' }} disabled={i===(devices?.length||0)-1} onClick={()=>moveDevice(i,+1)}>▼</button>
                      </div>
                      <div style={{ display:'flex', gap:6 }}>
                        <button title="Duplicate" style={{ ...S.button, padding:'6px 10px' }} onClick={()=>duplicateDevice(i)}>⧉</button>
                        <button title="Delete" style={{ ...S.button, ...S.buttonDanger, padding:'6px 10px' }} onClick={()=>deleteDevice(i)}>🗑</button>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
            {/* Merge: Keep neutral text */}
            {(devices||[]).length===0 && <div style={{ color:'var(--admin-muted)' }}>No devices yet. Use “Add Device” to place devices.</div>}
          </aside>

          <section style={{ position:'relative' }}>
            <div style={S.card}>
              <div style={{ display:'flex', justifyContent:'space-between', alignItems:'flex-end', gap:12, marginBottom:8, flexWrap:'wrap' }}>
                <div>
                  <h3 style={{ margin:0 }}>Devices Map</h3>
                  <div style={{ color:'var(--admin-muted)', fontSize:12 }}>
                    Select a <b>device</b> pin to move it. Map uses your **Game Region** center/zoom.
                  </div>
                </div>
              </div>

              {isDeviceEditorOpen && (() => {
                const trigger = mergeTriggerState(devDraft.trigger);
                const actionOptions = triggerOptionSets[trigger.actionType] || [];
                const selectedAction = actionOptions.find(opt => opt.id === trigger.actionTarget) || null;
                const previewThumb = trigger.actionThumbnail || selectedAction?.thumbnail || '';
                const resolvedPreview = previewThumb ? toDirectMediaURL(previewThumb) : '';
                return (
                  <div style={{ border:'1px solid var(--admin-border-soft)', borderRadius:10, padding:12, marginBottom:12 }}>
                    <div style={S.floatingBarTop}>
                      <div style={S.overlayBarSide}>
                        <button
                          style={S.cancelGlowButton}
                          onClick={cancelDeviceEditor}
                          title="Close the device editor without saving"
                        >
                          Cancel & Close
                        </button>
                        <div style={S.noteText}>Use when you need to exit without storing updates.</div>
                      </div>
                      <div style={S.overlayCenter}>
                        <div style={S.overlayIdRow}>
                          <span style={S.overlayIdLabel}>Device ID</span>
                          <code style={S.overlayIdValue}>{devDraft.id || '—'}</code>
                        </div>
                        {/* Merge: Use "Edit Device" for title */}
                        <h4 style={{ margin:'0 0 6px 0' }}>
                          {deviceEditorMode === 'new' ? 'New Device' : 'Edit Device'}
                        </h4>
                        <div style={{ marginTop:4 }}>
                          <button
                            type="button"
                            style={S.subtleActionButton}
                            onClick={resetDeviceEditor}
                            title="Restore the draft to its last saved state"
                          >
                            Reset draft
                          </button>
                        </div>
                        <div style={S.noteText}>Update the title, type, or trigger settings before saving.</div>
                      </div>
                      <div style={S.overlayBarSide}>
                        <button
                          style={{
                            ...S.action3DButton,
                            ...(deviceActionFlash ? S.action3DFlash : {}),
                          }}
                          onClick={handleDeviceSave}
                          // Merge: Use "Save Changes and Close" for button text
                          title={deviceEditorMode === 'new'
                            ? 'Save the new device and close the editor'
                            : 'Save your changes and close the editor'}
                        >
                          {deviceEditorMode === 'new'
                            ? 'Save New Device and Close'
                            : 'Save Changes and Close'}
                        </button>
                        <div style={S.noteText}>Watch for the green flash when the device is stored.</div>
                      </div>
                    </div>
                    <div style={{ display:'grid', gridTemplateColumns:'64px 1fr 1fr 1fr 1fr', gap:8, alignItems:'center' }}>
                      <div>
                        {devDraft.iconKey
                          ? <img alt="icon" src={toDirectMediaURL(deviceIconUrlFromKey(devDraft.iconKey))} style={{ width:48, height:48, objectFit:'contain', border:'1px solid var(--admin-border-soft)', borderRadius:8 }}/>
                          : <div style={{ width:48, height:48, border:'1px dashed var(--admin-border-soft)', borderRadius:8, display:'grid', placeItems:'center', color:'var(--admin-muted)' }}>icon</div>}
                      </div>
                      <Field label="Title"><input style={S.input} value={devDraft.title} onChange={(e)=>setDevDraft(d=>({ ...d, title:e.target.value }))}/></Field>
                      <Field label="Type">
                        <select style={S.input} value={devDraft.type} onChange={(e)=>setDevDraft(d=>({ ...d, type:e.target.value }))}>
                          {DEVICE_TYPES.map(t=><option key={t.value} value={t.value}>{t.label}</option>)}
                        </select>
                      </Field>
                      <Field label="Icon">
                        <select style={S.input} value={devDraft.iconKey} onChange={(e)=>setDevDraft(d=>({ ...d, iconKey:e.target.value }))}>
                          <option value="">(default)</option>
                          {(config?.icons?.devices||[]).map(it=><option key={it.key} value={it.key}>{it.name||it.key}</option>)}
                        </select>
                      </Field>
                      <Field label="Effect (sec)">
                        <input type="number" min={5} max={3600} style={S.input} value={devDraft.effectSeconds}
                          onChange={(e)=>setDevDraft(d=>({ ...d, effectSeconds: clamp(Number(e.target.value||0),5,3600) }))}/>
                      </Field>
                    </div>

                    {/* Trigger Section */}
                    <div style={{ marginTop:14, border:'1px solid var(--admin-border-soft)', borderRadius:10, padding:12 }}>
                      <div style={{ fontWeight:700, marginBottom:8 }}>Trigger</div>
                      <label style={{ display:'flex', alignItems:'center', gap:8 }}>
                        <input
                          type="checkbox"
                          checked={trigger.enabled}
                          onChange={(e)=>{
                            const checked = e.target.checked;
                            setDeviceTriggerPicker('');
                            setDevDraft(d=>({ ...d, trigger: mergeTriggerState(d.trigger, { enabled: checked }) }));
                          }}
                        />
                        <span>
                          Trigger Device — when this device is breached or deployed it will create an action.
                        </span>
                      </label>

                      {trigger.enabled ? (
                        <>
                          <div style={{ marginTop:12, display:'flex', gap:10, alignItems:'center', flexWrap:'wrap' }}>
                            <div style={{ fontSize:12, color:'var(--admin-muted)' }}>Action type</div>
                            <select
                              style={S.input}
                              value={trigger.actionType}
                              onChange={(e)=>{
                                const nextType = e.target.value;
                                setDeviceTriggerPicker('');
                                setDevDraft(d=>({
                                  ...d,
                                  trigger: mergeTriggerState(d.trigger, {
                                    actionType: nextType,
                                    actionTarget: '',
                                    actionLabel: '',
                                    actionThumbnail: '',
                                  }),
                                }));
                              }}
                            >
                              <option value="media">Media</option>
                              <option value="devices">Devices</option>
                              <option value="missions">Missions</option>
                            </select>
                          </div>

                          <div style={{ marginTop:12 }}>
                            <div style={{ fontSize:12, color:'var(--admin-muted)', marginBottom:6 }}>Action target</div>
                            <div style={{ position:'relative' }}>
                              <button
                                type="button"
                                style={{ ...S.button, width:'100%', justifyContent:'space-between', display:'flex', alignItems:'center' }}
                                onClick={()=>setDeviceTriggerPicker(prev => prev === 'action' ? '' : 'action')}
                              >
                                <span>{selectedAction ? selectedAction.label : 'Select action target'}</span>
                                <span style={{ opacity:0.6 }}>▾</span>
                              </button>
                              {deviceTriggerPicker === 'action' && (
                                <div style={{ position:'absolute', top:'calc(100% + 6px)', left:0, right:0, zIndex:30, maxHeight:240, overflowY:'auto', border:'1px solid var(--admin-border-soft)', borderRadius:10, background:'var(--appearance-panel-bg, var(--admin-panel-bg))', boxShadow:'0 16px 32px rgba(0,0,0,0.4)' }}>
                                  {actionOptions.length === 0 ? (
                                    <div style={{ padding:12, color:'var(--admin-muted)' }}>No options available.</div>
                                  ) : actionOptions.map(opt => (
                                    <div
                                      key={opt.id}
                                      onClick={()=>{
                                        setDevDraft(d=>({
                                          ...d,
                                          trigger: mergeTriggerState(d.trigger, {
                                            actionTarget: opt.id,
                                            actionLabel: opt.label,
                                            actionThumbnail: opt.thumbnail,
                                          }),
                                        }));
                                        setDeviceTriggerPicker('');
                                      }}
                                      style={{ display:'grid', gridTemplateColumns:'56px 1fr', gap:10, alignItems:'center', padding:'8px 12px', cursor:'pointer', borderBottom:'1px solid var(--admin-border-soft)' }}
                                    >
                                      <div style={{ width:56, height:42, borderRadius:8, overflow:'hidden', background:'var(--admin-tab-bg)', display:'grid', placeItems:'center' }}>
                                        {opt.thumbnail ? (
                                          <img src={toDirectMediaURL(opt.thumbnail)} alt="" style={{ width:'100%', height:'100%', objectFit:'cover' }} />
                                        ) : (
                                          <div style={{ fontSize:12, color:'var(--admin-muted)' }}>No preview</div>
                                        )}
                                      </div>
                                      <div>
                                        <div style={{ fontWeight:600 }}>{opt.label}</div>
                                        <div style={{ fontSize:12, color:'var(--admin-muted)' }}>{opt.id}</div>
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              )}
                            </div>
                            {resolvedPreview && (
                              <div style={{ marginTop:12, display:'flex', gap:12, alignItems:'center' }}>
                                <div style={{ fontSize:12, color:'var(--admin-muted)' }}>Selected preview</div>
                                <div style={{ width:80, height:60, borderRadius:10, overflow:'hidden', border:'1px solid var(--admin-border-soft)', background:'var(--admin-tab-bg)', display:'grid', placeItems:'center' }}>
                                  <img src={resolvedPreview} alt="preview" style={{ width:'100%', height:'100%', objectFit:'cover' }} />
                                </div>
                              </div>
                            )}
                          </div>
                        </>
                      ) : (
                        <div style={{ marginTop:8, color:'var(--admin-muted)', fontSize:12 }}>Enable Trigger Device to configure actions.</div>
                      )}
                    </div>

                    <div style={{ marginTop:8, color:'var(--admin-muted)', fontSize:12 }}>
                      {devDraft.lat==null ? 'Click the map or search an address to set location'
                        : <>lat {Number(devDraft.lat).toFixed(6)}, lng {Number(devDraft.lng).toFixed(6)}</>}
                    </div>
                  </div>
                );
              })()}

              <div style={{ display:'grid', gap:8, marginBottom:8 }}>
                <div style={{ display:'flex', alignItems:'center', gap:12, flexWrap:'wrap' }}>
                  <label style={{ display:'flex', alignItems:'center', gap:6 }}>
                    <input type="checkbox" checked={showRings} onChange={(e)=>setShowRings(e.target.checked)}/> Show radius rings
                  </label>
                  <label style={{ display:'flex', alignItems:'center', gap:6 }}>
                    Selected pin size:
                    <input type="range" min={16} max={48} step={2} value={selectedPinSize}
                      disabled={selectedDevIdx==null}
                      onChange={(e)=>setSelectedPinSize(Number(e.target.value))}
                    />
                    <code style={{ color:'var(--admin-muted)' }}>{selectedDevIdx==null ? '—' : `${selectedPinSize}px`}</code>
                  </label>
                </div>
                <div style={{ display:'grid', gridTemplateColumns:'1fr auto', gap:8, alignItems:'center' }}>
                  <input
                    type="range" min={5} max={2000} step={5}
                    disabled={deviceRadiusDisabled}
                    value={deviceRadiusValue}
                    onChange={(e)=>{
                      const r = Number(e.target.value);
                      if (selectedDevIdx!=null) setSelectedDeviceRadius(r);
                      else setDevDraft(d=>({ ...d, pickupRadius: r }));
                    }}
                  />
                  <code style={{ color:'var(--admin-muted)' }}>
                    {selectedDevIdx!=null ? `D${selectedDevIdx+1} radius: ${deviceRadiusValue} m`
                      : isAddingDevice ? `New device radius: ${deviceRadiusValue} m`
                      : 'Select a device to adjust radius'}
                  </code>
                </div>
              </div>

              <MapOverview
                missions={(suite?.missions)||[]}
                devices={devices}
                icons={config?.icons||DEFAULT_ICONS}
                showRings={showRings}
                mapCenter={mapCenter}
                mapZoom={mapZoom}
                defaultIconSizePx={defaultPinSize}
                selectedIconSizePx={selectedPinSize}
                interactive={isAddingDevice}
                draftDevice={isAddingDevice ? { lat:devDraft.lat, lng:devDraft.lng, radius:devDraft.pickupRadius } : null}
                selectedDevIdx={selectedDevIdx}
                selectedMissionIdx={null}
                onDraftChange={isAddingDevice ? ((lat,lng)=>setDevDraft(d=>({ ...d, lat, lng }))) : null}
                onMoveSelected={(lat,lng)=>moveSelectedDevice(lat,lng)}
                onMoveSelectedMission={null}
                onSelectDevice={(i)=>{ openDeviceEditor(i); }}
                onSelectMission={null}
                readOnly={false}
                lockToRegion={true}
              />
              {/* Merge: Remove buttons below map */}
            </div>
          </section>
        </main>
      )}

      {/* SETTINGS */}
      {tab==='settings' && (
        // Keep Main version's 2-column layout
        <main style={S.wrapGrid2}>
          <aside style={S.settingsSidebar}>
            <div style={{ ...S.card, ...S.settingsSidebarCard }}>
              <div style={S.settingsHeroRow}>
                <div style={S.headerCoverFrame}>
                  {headerCoverThumb ? (
                    <img
                      src={headerCoverThumb}
                      alt="Active game cover"
                      style={S.headerCoverThumb}
                    />
                  ) : (
                    <div style={S.headerCoverPlaceholder}>No Cover</div>
                  )}
                </div>
                <div style={S.settingsHeroText}>
                  <div style={S.headerGameTitle}>{headerGameTitle}</div>
                  <div style={S.headerSubtitle}>Admin Control Deck</div>
                </div>
              </div>
              <div style={S.settingsHeroNote}>Titles are managed per game. Create a new game to set a different name.</div>
              <div style={S.settingsSlugBlock}>
                <div style={S.fieldLabel}>Slug</div>
                <code style={S.readonlyCode}>{config?.game?.slug || slugForMeta}</code>
                <div style={S.noteText}>Each slug maps to <code>/public/games/[slug]</code> for config, missions, and covers.</div>
              </div>
            </div>
            <div style={{ ...S.card, ...S.settingsSidebarCard }}>
              <div style={S.settingsControlSection}>
                <div style={S.settingsControlLabel}>Saved Games</div>
                <select
                  style={S.input}
                  value={activeSlug}
                  onChange={(e)=>setActiveSlug(e.target.value)}
                >
                  {selectGameOptions.map((option) => (
                    <option key={option.value} value={option.value}>{option.label}</option>
                  ))}
                </select>
                <div style={S.noteText}>
                  Switch to another saved escape ride. The selection reloads missions, devices, and settings.
                </div>
              </div>
              <div style={S.settingsActionRow}>
                <button
                  type="button"
                  style={{ ...S.button, ...S.buttonSuccess, width: '100%' }}
                  onClick={()=>setShowNewGame(true)}
                >
                  + New Game
                </button>
              </div>
              <div style={{ ...S.noteText, marginTop:4 }}>Opens the creation window for naming, slugging, and selecting cover art.</div>
              <div style={S.settingsControlGroup}>
                <label style={S.settingsControlRow}>
                  <input
                    type="checkbox"
                    checked={deployGameEnabled}
                    onChange={(e)=>setDeployEnabled(e.target.checked)}
                    disabled={!gameEnabled}
                  />
                  Deploy game build
                </label>
                <label style={{ ...S.settingsControlRow, cursor: 'default' }}>
                  Deploy delay (sec):
                  <input
                    type="number" min={0} max={120}
                    value={deployDelaySec}
                    onChange={(e)=> setDeployDelaySec(Math.max(0, Math.min(120, Number(e.target.value || 0))))}
                    style={{ ...S.input, width: 110, opacity: deployGameEnabled && gameEnabled ? 1 : 0.45 }}
                    disabled={!deployGameEnabled || !gameEnabled}
                  />
                </label>
                {!gameEnabled && (
                  <span style={{ ...S.metaMuted, display:'flex', alignItems:'center', gap:6 }}>
                    ⚠️ Game folder mirroring disabled — deploy controls are read-only.
                  </span>
                )}
              </div>
            </div>
            <div style={{ ...S.card, ...S.settingsSidebarCard }}>
              <div style={{ fontWeight:700 }}>Cover status</div>
              <div style={{ fontSize:12, color:'var(--admin-muted)' }}>
                {coverStatusMessage}
              </div>
            </div>
          </aside>
          <section style={S.settingsContent}>
            <div style={S.card}>
              <h3 style={{ marginTop:0 }}>Game Settings</h3>
              <div style={S.coverControlsRow}>
                <div
                  onDragOver={(e)=>{ e.preventDefault(); if (e.dataTransfer) e.dataTransfer.dropEffect = 'copy'; setCoverDropActive(true); }}
                  onDragLeave={(e)=>{ e.preventDefault(); setCoverDropActive(false); }}
                  onDrop={(e)=>{
                    e.preventDefault();
                    setCoverDropActive(false);
                    const file = e.dataTransfer?.files?.[0];
                    if (file) handleCoverFile(file);
                  }}
                  style={{ ...S.coverDropZone, ...(coverDropActive ? S.coverDropZoneActive : {}) }}
                >
                  {coverPreviewUrl ? (
                    <img src={coverPreviewUrl} alt="Cover preview" style={S.coverDropImage} />
                  ) : (
                    <div style={S.coverDropPlaceholder}>
                      <strong>Drag & drop cover art</strong>
                      <span>JPG or PNG · under 1&nbsp;MB · ideal at 16:9</span>
                    </div>
                  )}
                </div>
                <div style={S.coverActionsColumn}>
                  <div style={S.coverActionButtons}>
                    <button
                      style={{ ...S.button, ...S.saveCoverButton, opacity: hasCoverForSave ? 1 : 0.45 }}
                      onClick={saveCoverImageOnly}
                      disabled={!hasCoverForSave}
                    >
                      Save Cover Image
                    </button>
                    <button style={S.button} onClick={()=>coverFileInputRef.current?.click()}>Upload image</button>
                    <input
                      ref={coverFileInputRef}
                      type="file"
                      accept="image/*"
                      style={{ display:'none' }}
                      onChange={(e)=>{
                        const file = e.target.files?.[0];
                        if (file) handleCoverFile(file);
                        if (e.target) e.target.value = '';
                      }}
                    />
                    <button style={S.button} onClick={openCoverPicker} disabled={coverPickerLoading}>
                      {coverPickerLoading ? 'Loading media…' : 'Media pool'}
                    </button>
                    <button
                      style={{ ...S.button, ...S.buttonDanger }}
                      onClick={clearCoverImage}
                      disabled={!config?.game?.coverImage}
                    >
                      Remove
                    </button>
                  </div>
                  {uploadStatus && (
                    <div style={S.coverActionStatus}>{uploadStatus}</div>
                  )}
                  <div style={S.coverActionHint}>
                    Tip: <strong>Save Cover Image</strong> stores this artwork right away and also copies it to <code>/media/covers</code> for reuse.
                  </div>
                </div>
              </div>
              <div style={{ marginTop: 18 }} />
              <Field label="Game Type">
                <select style={S.input} value={config.game.type}
                  onChange={(e)=>setConfig({ ...config, game:{ ...config.game, type:e.target.value } })}>
                  {GAME_TYPES.map((g)=><option key={g} value={g}>{g}</option>)}
                </select>
                <div style={S.noteText}>Pick the base structure for missions and pacing.</div>
              </Field>
              {/* Merge: Add playerCount from codex branch */}
              <Field label="Number of Players">
                <select
                  style={S.input}
                  value={playerCount}
                  onChange={(e)=>{
                    const next = Number(e.target.value);
                    setConfig({ ...config, game:{ ...config.game, playerCount: next } });
                    setDirty(true); // Ensure dirty flag is set
                  }}
                >
                  {[1,2,4].map((count)=>(
                    <option key={count} value={count}>{count}</option>
                  ))}
                </select>
                <div style={S.noteText}>Choose solo, duo, or four-player escape rides.</div>
              </Field>
              <Field label="Game Tags (comma separated)">
                <input
                  style={S.input}
                  value={gameTagsDraft}
                  onChange={(e)=>updateGameTagsDraft(e.target.value)}
                  placeholder="default-game, mystery"
                />
                <div style={S.noteText}>
                  The current slug and <code>default-game</code> are enforced automatically.
                </div>
              </Field>
              {/* Deploy checkbox moved to sidebar in Main */}
              <Field label="Stripe Splash Page">
                <label style={{ display:'flex', gap:8, alignItems:'center' }}>
                  <input type="checkbox" checked={config.splash.enabled !== false} // Ensure default is true
                    onChange={(e)=>setConfig({ ...config, splash:{ ...config.splash, enabled:e.target.checked } })}/>
                  Enable Splash (game code & Stripe)
                </label>
                <div style={S.noteText}>Toggles the landing experience with access code + payment prompts.</div>
                {/* Merge: Add splashMode toggle from codex branch */}
                <div style={S.toggleWrap}>
                  {[
                    { key: 'test', label: 'Test Mode' },
                    { key: 'live', label: 'Live Mode' },
                  ].map((option) => {
                    const active = splashMode === option.key;
                    return (
                      <button
                        key={option.key}
                        type="button"
                        onClick={()=>{
                            setConfig({ ...config, splash:{ ...config.splash, mode: option.key } });
                            setDirty(true); // Ensure dirty flag is set
                        }}
                        style={{
                          ...S.toggleOption,
                          ...(active ? S.toggleOptionActive : {}),
                        }}
                      >
                        {option.label}
                      </button>
                    );
                  })}
                </div>
                <div style={S.noteText}>
                  Test Mode keeps Stripe in sandbox. Live Mode activates production checkout for teams.
                </div>
              </Field>
            </div>

            <div style={{ ...S.card, marginTop:16 }}>
              <h3 style={{ marginTop:0 }}>Game Region & Geofence</h3>
              <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(220px,1fr))', gap:12 }}>
                <Field label="Default Map Center — Latitude">
                  <input
                    type="number" step="0.000001" style={S.input}
                    value={config.map?.centerLat ?? ''}
                    onChange={(e)=>{setConfig({ ...config, map:{ ...(config.map||{}), centerLat: Number(e.target.value||0) } }); setDirty(true);}}
                  />
                </Field>
                <Field label="Default Map Center — Longitude">
                  <input
                    type="number" step="0.000001" style={S.input}
                    value={config.map?.centerLng ?? ''}
                    onChange={(e)=>{setConfig({ ...config, map:{ ...(config.map||{}), centerLng: Number(e.target.value||0) } }); setDirty(true);}}
                  />
                </Field>
                <Field label="Find center by address/city">
                  <form onSubmit={searchMapCenter} style={{ display:'grid', gridTemplateColumns:'1fr auto', gap:8 }}>
                    <input placeholder="Address / City" value={mapSearchQ} onChange={(e)=>setMapSearchQ(e.target.value)} style={S.input}/>
                    <button type="submit" className="button" style={S.button} disabled={mapSearching}>{mapSearching?'Searching…':'Search'}</button>
                  </form>
                  <div style={{ background:'var(--admin-input-bg)', border:'1px solid var(--admin-border-soft)', borderRadius:10, padding:8, marginTop:8, maxHeight:160, overflow:'auto', display: mapResults.length>0 ? 'block' : 'none' }}>
                    {mapResults.map((r,i)=>(
                      <div key={i} onClick={()=>useCenterResult(r)} style={{ padding:'6px 8px', cursor:'pointer', borderBottom:'1px solid var(--admin-border-soft)' }}>
                        <div style={{ fontWeight:600 }}>{r.display_name}</div>
                        <div style={{ color:'var(--admin-muted)', fontSize:12 }}>lat {Number(r.lat).toFixed(6)}, lng {Number(r.lon).toFixed(6)}</div>
                      </div>
                    ))}
                  </div>
                </Field>
                <Field label="Default Zoom">
                  <input
                    type="number" min={2} max={20} style={S.input}
                    value={config.map?.defaultZoom ?? 13}
                    onChange={(e)=>{setConfig({ ...config, map:{ ...(config.map||{}), defaultZoom: clamp(Number(e.target.value||13), 2, 20) } }); setDirty(true);}}
                  />
                </Field>
                <Field label="Geofence Mode">
                  <select
                    style={S.input}
                    value={config.geofence?.mode || 'test'}
                    onChange={(e)=>{setConfig({ ...config, geofence:{ ...(config.geofence||{}), mode: e.target.value } }); setDirty(true);}}
                  >
                    <option value="test">Test — click to enter (dev)</option>
                    <option value="live">Live — GPS radius only</option>
                  </select>
                </Field>
              </div>
              <div style={{ color:'var(--admin-muted)', marginTop:8, fontSize:12 }}>
                These defaults keep pins in the same region. “Geofence Mode” can be used by the Game client to allow click-to-enter in test vs GPS in live.
              </div>
            </div>

            <div style={{ ...S.card, marginTop:16 }}>
              <h3 style={{ marginTop:0 }}>Maintenance</h3>
              <div style={{ display:'flex', gap:8, flexWrap:'wrap' }}>
                {/* Keep Main's simpler delete button (gameEnabled check done in function) */}
                <button
                  style={{ ...S.button, ...S.buttonDanger }}
                  onClick={()=> setConfirmDeleteOpen(true)}
                >
                  🗑 Delete Game
                </button>
                <button style={S.button} onClick={scanProject}>🔎 Scan media usage (find unused)</button>
              </div>
            </div>

            <div style={{ ...S.card, marginTop:16 }}>
              <h3 style={{ marginTop:0 }}>Appearance (Global)</h3>
              <div style={{ marginBottom:16 }}>
                <div style={{ fontSize:12, color:'var(--admin-muted)', marginBottom:8 }}>Interface tone</div>
                <div style={{ display:'flex', gap:8, flexWrap:'wrap' }}>
                  {[
                    { key:'light', label:'☀️ Light — dark text' },
                    { key:'dark', label:'🌙 Dark — light text' },
                  ].map((option) => {
                    const active = interfaceTone === option.key;
                    return (
                      <button
                        key={option.key}
                        type="button"
                        onClick={()=>updateInterfaceTone(option.key)}
                        style={{
                          borderRadius:12,
                          padding:'8px 14px',
                          border: active ? '1px solid var(--admin-accent)' : '1px solid var(--admin-border-soft)',
                          background: active ? 'var(--admin-tab-active-bg)' : 'var(--admin-tab-bg)',
                          color:'var(--admin-body-color)',
                          cursor:'pointer',
                          fontWeight: active ? 600 : 500,
                          boxShadow: active ? '0 0 0 1px rgba(255,255,255,0.08)' : 'none',
                        }}
                      >
                        {option.label}
                      </button>
                    );
                  })}
                </div>
                <div style={{ color:'var(--admin-muted)', fontSize:12, marginTop:8 }}>
                  Switch between bright control-room surfaces or a night-mode deck. The tone applies to the admin UI and live game backgrounds.
                </div>
              </div>
              <div style={{ marginBottom:12 }}>
                <div style={{ fontSize:12, color:'var(--admin-muted)', marginBottom:8 }}>Theme skins</div>
                <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(180px,1fr))', gap:8 }}>
                  {APPEARANCE_SKINS.map((skin)=>{
                    const active = selectedAppearanceSkin === skin.key;
                    const previewBg = skin.appearance.screenBgImage && skin.appearance.screenBgImageEnabled !== false
                      ? `linear-gradient(rgba(0,0,0,${skin.appearance.screenBgOpacity}), rgba(0,0,0,${skin.appearance.screenBgOpacity})), url(${toDirectMediaURL(skin.appearance.screenBgImage)}) center/cover no-repeat`
                      : `linear-gradient(rgba(0,0,0,${skin.appearance.screenBgOpacity}), rgba(0,0,0,${skin.appearance.screenBgOpacity})), ${skin.appearance.screenBgColor}`;
                    return (
                      <button
                        key={skin.key}
                        type="button"
                        onClick={()=>applyAppearanceSkin(skin.key)}
                        style={{
                          borderRadius:12,
                          border:`1px solid ${active ? 'var(--admin-accent)' : 'var(--admin-border-soft)'}`,
                          background: active ? 'var(--admin-tab-active-bg)' : 'var(--admin-tab-bg)',
                          padding:12,
                          textAlign:'left',
                          color:'var(--admin-body-color)',
                          cursor:'pointer',
                        }}
                      >
                        <div style={{ fontWeight:600 }}>{skin.label}</div>
                        <div style={{ fontSize:12, color:'var(--admin-muted)', margin:'4px 0 8px 0' }}>{skin.description}</div>
                        <div style={{
                          border:'1px dashed var(--admin-border-soft)',
                          borderRadius:8,
                          padding:10,
                          background: previewBg,
                          color: skin.appearance.fontColor,
                          fontFamily: skin.appearance.fontFamily,
                          fontSize: Math.max(14, Math.min(20, skin.appearance.fontSizePx * 0.7)),
                          textAlign: skin.appearance.textAlign,
                        }}>
                          Preview text
                        </div>
                      </button>
                    );
                  })}
                </div>
                <div style={{ marginTop:8, fontSize:12, color:'var(--admin-muted)' }}>
                  Selected skin: <strong>{selectedAppearanceSkinLabel}</strong>
                </div>
              </div>
              <AppearanceEditor
                value={config.appearance||defaultAppearance()}
                tone={interfaceTone}
                onChange={(next)=>{
                  setConfig(prev => {
                    const base = prev || {};
                    const retainedSkin = base.appearanceSkin && ADMIN_SKIN_TO_UI.has(base.appearanceSkin)
                      ? base.appearanceSkin
                      : detectAppearanceSkin(next, base.appearanceSkin);
                    return {
                      ...base,
                      appearance: next,
                      appearanceSkin: retainedSkin,
                    };
                  });
                  setDirty(true);
                  setStatus('🎨 Updated appearance settings');
                }}
              />
              <div style={{ color:'var(--admin-muted)', marginTop:8, fontSize:12 }}>
                Tip: keep vertical alignment on <b>Top</b> so text doesn’t cover the backpack.
              </div>
            </div>
          </section>
        </main>
      )}


      {/* TEXT rules */}
      {tab==='text' && <TextTab config={config} setConfig={setConfig} />}

      {/* MEDIA POOL — with sub-tabs and per-file usage counts */}
      {tab==='media-pool' && (
        <MediaPoolTab
          suite={suite}
          config={config}
          setConfig={setConfig}
          uploadStatus={uploadStatus}
          setUploadStatus={setUploadStatus}
          uploadToRepo={async (file, folder)=> {
            const url = await (async ()=>{ try { return await uploadToRepo(file, folder); } catch { return ''; }})();
            return url;
          }}
          onInventoryRefresh={syncInventory}
        />
      )}

      {/* ASSIGNED MEDIA — renamed Media tab */}
      {tab==='assigned' && (
        <AssignedMediaPageTab
          config={config}
          setConfig={setConfig}
          onReapplyDefaults={()=>setConfig(c=> (c ? applyDefaultIcons(c) : c))}
          inventory={inventory}
          devices={devices}
          missions={suite?.missions || []}
          // Merge: Keep props from codex branch
          assignedMediaError={assignedMediaError}
          onAssignedMediaError={setAssignedMediaError}
          onClearAssignedMediaError={() => setAssignedMediaError(null)}
          onStatus={setStatus}
          onUploadIcon={async (file) => uploadToRepo(file, 'icons')}
        />
      )}


      {coverPickerOpen && (
        <div style={{ position:'fixed', inset:0, background:'rgba(0,0,0,0.55)', display:'grid', placeItems:'center', zIndex:1600, padding:16 }}>
          <div style={{ ...S.card, width:'min(680px, 94vw)', maxHeight:'80vh', overflowY:'auto' }}>
            <h3 style={{ marginTop:0 }}>Select Cover Image</h3>
            {coverPickerLoading ? (
              <div style={{ color:'#9fb0bf' }}>Loading media…</div>
            ) : coverPickerItems.length === 0 ? (
              <div style={{ color:'#9fb0bf' }}>
                No cover-ready images found. Upload a new file or add art to the media pool.
              </div>
            ) : (
              <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fill,minmax(160px,1fr))', gap:12 }}>
                {coverPickerItems.map((item) => (
                  <button
                    key={item.url}
                    onClick={()=>applyCoverFromUrl(item.url)}
                    style={{
                      border:'1px solid #2a323b',
                      borderRadius:12,
                      background:'#0b0c10',
                      padding:0,
                      cursor:'pointer',
                      overflow:'hidden',
                      textAlign:'left',
                    }}
                  >
                    <img
                      src={toDirectMediaURL(item.url)}
                      alt={item.name || item.url}
                      style={{ width:'100%', height:120, objectFit:'cover' }}
                    />
                    <div style={{ padding:'6px 8px', fontSize:12, color:'#9fb0bf' }}>{item.name || item.url}</div>
                  </button>
                ))}
              </div>
            )}
            <div style={{ display:'flex', justifyContent:'flex-end', marginTop:16 }}>
              <button style={S.button} onClick={()=>setCoverPickerOpen(false)}>Close</button>
            </div>
          </div>
        </div>
      )}

      {/* TEST */}
      {tab==='test' && (
        <main style={S.wrap}>
          <div style={S.card}>
            <div style={{ display:'flex', justifyContent:'space-between', alignItems:'center', marginBottom:8 }}>
              <h3 style={{ margin:0 }}>Play Test</h3>
              <div style={{ display:'flex', gap:8, alignItems:'center', flexWrap:'wrap' }}>
                <label>Channel:&nbsp;
                  <select value={testChannel} onChange={(e)=>setTestChannel(e.target.value)} style={S.input}>
                    <option value="draft">draft</option>
                    <option value="published">published</option>
                  </select>
                </label>
                <button style={S.button} onClick={()=>setPreviewNonce(n=>n+1)}>Reload preview</button>
                <TestLauncher slug={activeSlugForClient} channel={testChannel} preferPretty={true} popup={false}/>
              </div>
            </div>
            {!gameBase && <div style={{ color:'var(--admin-muted)', marginBottom:8 }}>Set NEXT_PUBLIC_GAME_ORIGIN to enable preview.</div>}
            {gameBase && (
              <iframe
                key={previewNonce} // hard refresh on nonce change
                src={`${gameBase}/?${new URLSearchParams({
                  ...(activeSlugForClient ? { slug: activeSlugForClient } : {}),
                  channel: testChannel,
                  preview: '1',
                  cb: String(Date.now())
                }).toString()}`}
                style={{ width:'100%', height:'70vh', border:'1px solid var(--admin-border-soft)', borderRadius:12 }}
              />
            )}
          </div>
        </main>
      )}

      {protectionPrompt.open && (
        <div style={{ ...S.modalBackdrop, zIndex: 4200 }}>
          <div style={{ ...S.card, ...S.modalCard }}>
            <div style={S.modalTopBar}>
              <button style={S.cancelGlowButton} onClick={closeProtectionPrompt}>Cancel & Close</button>
              <div style={S.modalTitle}>
                {protectionPrompt.mode === 'enable' ? 'Enable Protection' : 'Disable Protection'}
              </div>
              <button
                style={S.modalCloseButton}
                onClick={closeProtectionPrompt}
                aria-label="Close protection dialog"
              >
                ×
              </button>
            </div>
            <form
              style={S.modalContent}
              onSubmit={(event) => {
                event.preventDefault();
                submitProtectionPrompt();
              }}
            >
              <div style={S.noteText}>
                {protectionPrompt.mode === 'enable'
                  ? 'Set a password to require authentication before anyone enters the Admin Control Deck.'
                  : 'Confirm the current password to disable the lock and return to open access.'}
              </div>
              <Field label="Password">
                <input
                  type="password"
                  style={S.input}
                  value={protectionPrompt.password}
                  onChange={(e)=>setProtectionPrompt((prev)=>({ ...prev, password: e.target.value }))}
                  placeholder="Enter password"
                  autoFocus
                />
              </Field>
              {protectionPrompt.requireConfirm && (
                <Field label="Confirm Password">
                  <input
                    type="password"
                    style={S.input}
                    value={protectionPrompt.confirm}
                    onChange={(e)=>setProtectionPrompt((prev)=>({ ...prev, confirm: e.target.value }))}
                    placeholder="Re-enter password"
                  />
                </Field>
              )}
              {protectionPrompt.error && (
                <div style={{ ...S.modalStatus, color: PROTECTION_COLOR_ALERT }}>
                  {protectionPrompt.error}
                </div>
              )}
              <div style={{ display:'flex', justifyContent:'flex-end', gap:12 }}>
                <button
                  type="submit"
                  style={{
                    ...S.button,
                    ...(protectionPrompt.mode === 'enable' ? S.buttonSuccess : S.buttonDanger),
                    minWidth: 220,
                    opacity: protectionState.saving ? 0.7 : 1,
                    cursor: protectionState.saving ? 'wait' : 'pointer',
                  }}
                  disabled={protectionState.saving}
                >
                  {protectionState.saving
                    ? 'Saving…'
                    : (protectionPrompt.mode === 'enable' ? 'Enable Protection' : 'Disable Protection')}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* New Game modal */}
      {/* Keep Main version's condition */}
      {showNewGame && (
        <div style={S.modalBackdrop}>
          <div style={{ ...S.card, ...S.modalCard }}>
            <div style={S.modalTopBar}>
              <button style={S.cancelGlowButton} onClick={handleNewGameModalClose}>Cancel & Close</button>
              <div style={S.modalTitle}>Create New Game</div>
              <button style={S.modalCloseButton} onClick={handleNewGameModalClose} aria-label="Close new game dialog">×</button>
            </div>
            <div style={S.modalContent}>
              {/* Keep Main version's warning */}
              {!gameEnabled && (
                <div style={{ ...S.noteText, background:'var(--admin-tab-bg)', padding:10, borderRadius:8, border:'1px solid var(--admin-border-soft)' }}>
                  Game folder mirroring is disabled. New games will update admin data only.
                </div>
              )}

              <Field label="Game Title">
                <input
                  style={S.input}
                  value={newTitle}
                  onChange={(e)=>setNewTitle(e.target.value)}
                  placeholder="Starship Escape"
                />
                <div style={S.noteText}>This name appears wherever the game is listed.</div>
              </Field>
              <Field label="Slug (folder name)">
                <input
                  style={S.input}
                  value={newGameSlug}
                  onChange={(e)=>handleNewSlugInput(e.target.value)}
                  placeholder="starship-escape"
                />
                <div style={S.noteText}>Stored at <code>/public/games/[slug]</code> alongside missions and config.</div>
              </Field>
              <Field label="Game Type">
                <select style={S.input} value={newType} onChange={(e)=>setNewType(e.target.value)}>
                  {GAME_TYPES.map((t)=>(<option key={t} value={t}>{t}</option>))}
                </select>
                <div style={S.noteText}>Select a template for default mission pacing.</div>
              </Field>
              <Field label="Mode">
                <select style={S.input} value={newMode} onChange={(e)=>setNewMode(e.target.value)}>
                  <option value="single">Single Player</option>
                  <option value="head2head">Head to Head (2)</option>
                  <option value="multi">Multiple (4)</option>
                </select>
                <div style={S.noteText}>Defines how many players join each session.</div>
              </Field>
              <Field label="Duration (minutes — 0 = infinite)">
                <input
                  type="number"
                  min={0}
                  max={24*60}
                  style={S.input}
                  value={newDurationMin}
                  onChange={(e)=>setNewDurationMin(Math.max(0, Number(e.target.value||0)))}
                />
                <div style={S.noteText}>Players see this countdown during the mission.</div>
              </Field>
              <Field label="Alert before end (minutes)">
                <input
                  type="number"
                  min={1}
                  max={120}
                  style={S.input}
                  value={newAlertMin}
                  onChange={(e)=>setNewAlertMin(Math.max(1, Number(e.target.value||1)))}
                />
                <div style={S.noteText}>Send a warning before time is up.</div>
              </Field>
              <Field label="Short Description">
                <textarea
                  style={{ ...S.input, minHeight: 80 }}
                  value={newShortDesc}
                  onChange={(e)=>setNewShortDesc(e.target.value)}
                  placeholder="One-sentence teaser for listings"
                />
                <div style={S.noteText}>Great for cards, previews, and quick share links.</div>
              </Field>
              <Field label="Long Description">
                <textarea
                  style={{ ...S.input, minHeight: 140 }}
                  value={newLongDesc}
                  onChange={(e)=>setNewLongDesc(e.target.value)}
                  placeholder="Give players the full briefing for this escape ride"
                />
                <div style={S.noteText}>Appears on marketing pages and internal docs.</div>
              </Field>
              <div style={{ marginBottom: 16 }}>
                <div style={{ fontSize:12, color:'var(--admin-muted)', marginBottom:6 }}>Cover Image</div>
                <div
                  onDragOver={(e)=>{ e.preventDefault(); setNewCoverDropActive(true); }}
                  onDragLeave={(e)=>{ e.preventDefault(); setNewCoverDropActive(false); }}
                  onDrop={(e)=>{
                    e.preventDefault();
                    setNewCoverDropActive(false);
                    const file = e.dataTransfer?.files?.[0];
                    if (file) handleNewGameCoverFile(file);
                  }}
                  style={{ ...S.coverDropZone, ...(newCoverDropActive ? S.coverDropZoneActive : {}) }}
                >
                  {newCoverPreview ? (
                    <img src={newCoverPreview} alt="New game cover" style={S.coverDropImage} />
                  ) : (
                    <div style={S.coverDropPlaceholder}>
                      <strong>Drag & drop cover art</strong>
                      <span>PNG or JPG · under 1 MB · shows beside the admin header</span>
                    </div>
                  )}
                </div>
                <div style={{ display:'flex', gap:8, flexWrap:'wrap', marginTop:8 }}>
                  <button type="button" style={S.button} onClick={()=>newGameCoverInputRef.current?.click()}>Upload cover</button>
                  <input
                    ref={newGameCoverInputRef}
                    type="file"
                    accept="image/*"
                    style={{ display:'none' }}
                    onChange={(e)=>{
                      const file = e.target.files?.[0];
                      if (file) handleNewGameCoverFile(file);
                      if (e.target) e.target.value = '';
                    }}
                  />
                  <button type="button" style={S.button} onClick={loadNewCoverOptions} disabled={newCoverLookupLoading}>
                    {newCoverLookupLoading ? 'Loading…' : 'Import from Media Pool'}
                  </button>
                  <button
                    type="button"
                    style={{ ...S.button, ...S.buttonDanger }}
                    onClick={clearNewGameCover}
                    disabled={!newCoverPreview && !newCoverSelectedUrl}
                  >
                    Clear cover
                  </button>
                </div>
                <div style={S.noteText}>Upload new artwork or reuse an existing asset.</div>
                {newCoverOptions.length > 0 && (
                  <div style={S.modalCoverGrid}>
                    {newCoverOptions.map((item) => (
                      <button
                        key={item.url}
                        type="button"
                        onClick={()=>applyNewCoverFromUrl(item.url)}
                        style={{
                          ...S.modalCoverButton,
                          ...(newCoverSelectedUrl === item.url ? S.modalCoverButtonActive : {}),
                        }}
                      >
                        <img src={toDirectMediaURL(item.url)} alt={item.name || item.url} style={S.modalCoverThumb} />
                        <div style={S.modalCoverLabel}>{item.name || item.url}</div>
                      </button>
                    ))}
                  </div>
                )}
              </div>
              {newGameStatus && <div style={S.modalStatus}>{newGameStatus}</div>}
              <div style={{ display:'flex', justifyContent:'flex-end', gap:12, flexWrap:'wrap' }}>
                <button
                  style={{ ...S.action3DButton, ...(newGameBusy ? { opacity:0.7, cursor:'wait' } : {}) }}
                  onClick={handleCreateNewGame}
                  disabled={newGameBusy}
                >
                  {newGameBusy ? 'Creating…' : 'Save New Game'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}


      {/* Delete confirm modal */}
      {/* Keep Main version's condition */}
      {confirmDeleteOpen && (
        <div style={{ position:'fixed', inset:0, background:'rgba(0,0,0,0.55)', display:'grid', placeItems:'center', zIndex:3000 }}>
          <div style={{ ...S.card, width:420 }}>
            <h3 style={{ marginTop:0 }}>Delete Game</h3>
            <div style={{ color:'var(--admin-body-color)', marginBottom:12 }}>
              Are you sure you want to delete <b>{config?.game?.title || (activeSlug || 'this game')}</b>?
            </div>
            <div style={{ display:'flex', gap:8, justifyContent:'flex-end' }}>
              <button style={S.button} onClick={()=>setConfirmDeleteOpen(false)}>Cancel</button>
              <button
                style={{ ...S.button, ...S.buttonDanger }}
                onClick={reallyDeleteGame}
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}

    </div>
  );
}

/* ───────────────────────── Sub-tabs & Components ───────────────────────── */
function Field({ label, children }) {
  return (
    <div style={{ marginBottom: 12 }}>
      <div style={{ fontSize: 12, color: 'var(--admin-muted)', marginBottom: 6 }}>{label}</div>
      {children}
    </div>
  );
}
function MultipleChoiceEditor({ value, correctIndex, onChange }) {
  const [local, setLocal] = useState(Array.isArray(value) ? value.slice(0, 5) : []);
  const [correct, setCorrect] = useState(Number.isInteger(correctIndex) ? correctIndex : undefined);
  useEffect(()=>{ setLocal(Array.isArray(value)?value.slice(0,5):[]); },[value]);
  useEffect(()=>{ setCorrect(Number.isInteger(correctIndex)?correctIndex:undefined); },[correctIndex]);
  function sync(nextChoices, nextCorrect) {
    const trimmed = nextChoices.map(s=>(s || '').trim()).filter(Boolean).slice(0,5);
    const ci = Number.isInteger(nextCorrect) && nextCorrect < trimmed.length ? nextCorrect : undefined;
    onChange({ choices: trimmed, correctIndex: ci });
  }
  return (
    <div style={{ border:'1px solid var(--admin-border-soft)', borderRadius:10, padding:12 }}>
      <div style={{ fontWeight:600, marginBottom:8 }}>Choices (A–E)</div>
      {[0,1,2,3,4].map((i)=>(
        <div key={i} style={{ display:'grid', gridTemplateColumns:'24px 1fr', alignItems:'center', gap:8, marginBottom:8 }}>
          <input type="radio" name="mcq-correct" checked={correct===i} onChange={()=>{ setCorrect(i); sync(local,i); }} title="Mark as correct"/>
          <input placeholder={`Choice ${String.fromCharCode(65+i)}`} style={S.input} value={local[i]||''}
            onChange={(e)=>{ const next=[...local]; next[i]=e.target.value; setLocal(next); sync(next, correct); }}/>
        </div>
      ))}
      <div style={{ color:'var(--admin-muted)', fontSize:12 }}>Leave blanks for unused options. Exactly one radio can be marked correct.</div>
    </div>
  );
}
function MediaPreview({ url, kind }) {
  if (!url) return null;
  const u = toDirectMediaURL(String(url).trim());
  const lower = u.toLowerCase();
  const isVideo = /\.(mp4|webm|mov)(\?|#|$)/.test(lower);
  const isImage = /\.(png|jpg|jpeg|gif|webp|svg)(\?|#|$)/.test(lower) || u.includes('drive.google.com/uc?export=view'); // Added SVG
  const isAudio = /\.(mp3|wav|ogg|m4a|aiff|aif)(\?|#|$)/.test(lower);
  return (
    <div style={{ marginTop:8 }}>
      <div style={{ color:'var(--admin-muted)', fontSize:12, marginBottom:6 }}>Preview ({kind})</div>
      {isVideo ? (
        <video src={u} controls style={{ width:'100%', maxHeight:260, borderRadius:10, border:'1px solid var(--admin-border-soft)' }}/>
      ) : isImage ? (
        <img src={u} alt="preview" style={{ width:'100%', maxHeight:260, objectFit:'contain', borderRadius:10, border:'1px solid var(--admin-border-soft)' }}/>
      ) : isAudio ? (
        <audio src={u} controls style={{ width:'100%' }} />
      ) : (
        <a href={u} target="_blank" rel="noreferrer" style={{ color:'var(--admin-muted)', textDecoration:'underline' }}>Open media</a>
      )}
    </div>
  );
}

/* Styles */
const S = {
  body: {
    background: 'transparent',
    color: 'var(--appearance-font-color, var(--admin-body-color))',
    minHeight: '100vh',
    fontFamily: 'var(--appearance-font-family, var(--admin-font-family))',
  },
  metaBanner: {
    background: 'rgba(7, 12, 18, 0.82)',
    backdropFilter: 'blur(14px)',
    color: 'var(--appearance-font-color, var(--admin-body-color))', // Use var
    borderBottom: '1px solid rgba(148, 163, 184, 0.2)',
    padding: '8px 16px',
    boxShadow: '0 18px 36px rgba(2, 6, 12, 0.45)',
  },
  metaBannerLine: {
    maxWidth: 1400,
    margin: '0 auto',
    display: 'flex',
    flexWrap: 'wrap',
    gap: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  metaBadge: {
    padding: '2px 8px',
    borderRadius: 999,
    background: 'rgba(59, 130, 246, 0.16)',
    color: '#9cc0ff',
    fontSize: 12,
    letterSpacing: '0.08em',
    textTransform: 'uppercase',
  },
  metaMuted: {
    color: 'var(--admin-muted)',
    fontSize: 12,
    letterSpacing: '0.05em',
    textTransform: 'uppercase',
  },
  metaLink: {
    color: 'var(--admin-link-color, #60a5fa)',
    textDecoration: 'none',
    fontWeight: 600,
  },
  metaBannerError: {
    color: '#f87171',
    fontWeight: 600,
  },
  header: {
    padding: 20,
    // Keep Main version's theme variables
    background: 'var(--admin-header-bg)',
    backdropFilter: 'var(--admin-header-blur, blur(20px))',
    borderBottom: 'var(--admin-header-border)',
    position: 'sticky',
    top: 0,
    zIndex: 40,
    boxShadow: 'var(--admin-header-shadow)',
    color: 'var(--appearance-font-color, var(--admin-body-color))',
  },
  wrap: { maxWidth: 1400, margin: '0 auto', padding: 16 },
  // Keep Main version's 2-column grid layout
  wrapGrid2: { display: 'grid', gridTemplateColumns: 'minmax(260px, 360px) 1fr', gap: 16, alignItems: 'start', maxWidth: 1400, margin: '0 auto', padding: 16 },
  // Keep Main version's settings sidebar styles
  settingsSidebar: {
    display: 'grid',
    gap: 16,
  },
  settingsSidebarCard: {
    display: 'grid',
    gap: 12,
  },
  settingsHeroRow: {
    display: 'flex',
    alignItems: 'center',
    gap: 12,
  },
  settingsHeroText: {
    display: 'grid',
    gap: 4,
    alignItems: 'flex-start',
  },
  settingsHeroNote: {
    fontSize: 12,
    color: 'var(--admin-muted)',
    marginTop: 6,
  },
  settingsSlugBlock: {
    display: 'grid',
    gap: 6,
  },
  settingsControlSection: {
    display: 'grid',
    gap: 8,
  },
  settingsControlLabel: {
    fontSize: 11,
    color: 'var(--admin-muted)',
    letterSpacing: '0.1em',
    textTransform: 'uppercase',
    fontWeight: 700,
  },
  settingsActionRow: {
    display: 'flex',
    alignItems: 'center',
  },
  settingsControlGroup: {
    display: 'grid',
    gap: 8,
  },
  settingsControlRow: {
    display: 'flex',
    alignItems: 'center',
    gap: 8,
    color: 'var(--admin-muted)',
    fontSize: 12,
    cursor: 'pointer',
  },
  settingsContent: {
    display: 'grid',
    gap: 16,
  },
  sidebarTall: {
    background: 'var(--appearance-panel-bg, var(--admin-panel-bg))',
    border: 'var(--appearance-panel-border, var(--admin-panel-border))',
    borderRadius: 18,
    padding: 14,
    position: 'sticky',
    top: 140, // Adjust top based on header height potentially
    height: 'calc(100vh - 160px)', // Adjust height
    overflow: 'auto',
    boxShadow: 'var(--appearance-panel-shadow, var(--admin-panel-shadow))',
  },
  sidebarBar: {
    display: 'flex',
    flexDirection: 'column',
    gap: 8,
    padding: 12,
    marginBottom: 12,
    borderRadius: 14,
    border: '1px solid var(--admin-border-soft)',
    background: 'var(--appearance-panel-bg, var(--admin-panel-bg))',
    boxShadow: '0 12px 24px rgba(8, 13, 19, 0.35)', // Keep specific shadow if needed
  },
  card: {
    position: 'relative',
    background: 'var(--appearance-panel-bg, var(--admin-panel-bg))',
    border: 'var(--appearance-panel-border, var(--admin-panel-border))',
    borderRadius: 18,
    padding: 18,
    boxShadow: 'var(--appearance-panel-shadow, var(--admin-panel-shadow))',
  },
  floatingBarTop: {
    position: 'sticky',
    top: -18, // Adjust based on card padding
    zIndex: 30,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    gap: 16,
    flexWrap: 'wrap',
    padding: '12px 0',
    background: 'var(--appearance-panel-bg, var(--admin-panel-bg))',
    borderBottom: '1px solid var(--admin-border-soft)',
  },
  floatingBarBottom: {
    position: 'sticky',
    bottom: -18, // Adjust based on card padding
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    gap: 16,
    padding: '12px 0',
    marginTop: 18,
    background: 'var(--appearance-panel-bg, var(--admin-panel-bg))',
    borderTop: '1px solid var(--admin-border-soft)',
  },
  // Removed mapFooterActions from codex branch
  missionItem: { borderBottom: '1px solid var(--admin-border-soft)', padding: '10px 4px' },
  noteText: { marginTop
